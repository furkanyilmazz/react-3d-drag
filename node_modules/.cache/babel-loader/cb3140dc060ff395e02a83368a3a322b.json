{"ast":null,"code":"import { Triangle, Vector3, Line3, Sphere } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\nexport class SeparatingAxisTriangle extends Triangle {\n  constructor(...args) {\n    super(...args);\n    this.isSeparatingAxisTriangle = true;\n    this.satAxes = new Array(4).fill().map(() => new Vector3());\n    this.satBounds = new Array(4).fill().map(() => new SeparatingAxisBounds());\n    this.points = [this.a, this.b, this.c];\n    this.sphere = new Sphere();\n    this.needsUpdate = false;\n  }\n\n  intersectsSphere(sphere) {\n    return sphereIntersectTriangle(sphere, this);\n  }\n\n}\n\nSeparatingAxisTriangle.prototype.update = function () {\n  const arr = new Array(3);\n  return function update() {\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    arr[0] = this.a;\n    arr[1] = this.b;\n    arr[2] = this.c;\n    const satAxes = this.satAxes;\n    const satBounds = this.satBounds;\n    const axis0 = satAxes[0];\n    const sab0 = satBounds[0];\n    this.getNormal(axis0);\n    sab0.setFromPoints(axis0, arr);\n    const axis1 = satAxes[1];\n    const sab1 = satBounds[1];\n    axis1.subVectors(a, b);\n    sab1.setFromPoints(axis1, arr);\n    const axis2 = satAxes[2];\n    const sab2 = satBounds[2];\n    axis2.subVectors(b, c);\n    sab2.setFromPoints(axis2, arr);\n    const axis3 = satAxes[3];\n    const sab3 = satBounds[3];\n    axis3.subVectors(c, a);\n    sab3.setFromPoints(axis3, arr);\n    this.sphere.setFromPoints(this.points);\n    this.needsUpdate = false;\n  };\n}();\n\nSeparatingAxisTriangle.prototype.closestPointToSegment = function () {\n  const point1 = new Vector3();\n  const point2 = new Vector3();\n  const edge = new Line3();\n  return function distanceToSegment(segment, target1 = null, target2 = null) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    const {\n      start,\n      end\n    } = segment;\n    const points = this.points;\n    let distSq;\n    let closestDistanceSq = Infinity; // check the triangle edges\n\n    for (let i = 0; i < 3; i++) {\n      const nexti = (i + 1) % 3;\n      edge.start.copy(points[i]);\n      edge.end.copy(points[nexti]);\n      closestPointsSegmentToSegment(edge, segment, point1, point2);\n      distSq = point1.distanceToSquared(point2);\n\n      if (distSq < closestDistanceSq) {\n        closestDistanceSq = distSq;\n        if (target1) target1.copy(point1);\n        if (target2) target2.copy(point2);\n      }\n    } // check end points\n\n\n    this.closestPointToPoint(start, point1);\n    distSq = start.distanceToSquared(point1);\n\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(start);\n    }\n\n    this.closestPointToPoint(end, point1);\n    distSq = end.distanceToSquared(point1);\n\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(end);\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();\n\nSeparatingAxisTriangle.prototype.intersectsTriangle = function () {\n  const saTri2 = new SeparatingAxisTriangle();\n  const arr1 = new Array(3);\n  const arr2 = new Array(3);\n  const cachedSatBounds = new SeparatingAxisBounds();\n  const cachedSatBounds2 = new SeparatingAxisBounds();\n  const cachedAxis = new Vector3();\n  return function intersectsTriangle(other) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    if (!other.isSeparatingAxisTriangle) {\n      saTri2.copy(other);\n      saTri2.update();\n      other = saTri2;\n    }\n\n    const satBounds1 = this.satBounds;\n    const satAxes1 = this.satAxes;\n    arr2[0] = other.a;\n    arr2[1] = other.b;\n    arr2[2] = other.c;\n\n    for (let i = 0; i < 4; i++) {\n      const sb = satBounds1[i];\n      const sa = satAxes1[i];\n      cachedSatBounds.setFromPoints(sa, arr2);\n      if (sb.isSeparated(cachedSatBounds)) return false;\n    }\n\n    const satBounds2 = other.satBounds;\n    const satAxes2 = other.satAxes;\n    arr1[0] = this.a;\n    arr1[1] = this.b;\n    arr1[2] = this.c;\n\n    for (let i = 0; i < 4; i++) {\n      const sb = satBounds2[i];\n      const sa = satAxes2[i];\n      cachedSatBounds.setFromPoints(sa, arr1);\n      if (sb.isSeparated(cachedSatBounds)) return false;\n    } // check crossed axes\n\n\n    for (let i = 0; i < 4; i++) {\n      const sa1 = satAxes1[i];\n\n      for (let i2 = 0; i2 < 4; i2++) {\n        const sa2 = satAxes2[i2];\n        cachedAxis.crossVectors(sa1, sa2);\n        cachedSatBounds.setFromPoints(cachedAxis, arr1);\n        cachedSatBounds2.setFromPoints(cachedAxis, arr2);\n        if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n      }\n    }\n\n    return true;\n  };\n}();\n\nSeparatingAxisTriangle.prototype.distanceToPoint = function () {\n  const target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\n\nSeparatingAxisTriangle.prototype.distanceToTriangle = function () {\n  const point = new Vector3();\n  const point2 = new Vector3();\n  const cornerFields = ['a', 'b', 'c'];\n  const line1 = new Line3();\n  const line2 = new Line3();\n  return function distanceToTriangle(other, target1 = null, target2 = null) {\n    if (other.needsUpdate) {\n      other.update();\n    }\n\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    if (this.intersectsTriangle(other)) {\n      // TODO: This will not result in a point that lies on\n      // the intersection line of the triangles\n      if (target1 || target2) {\n        this.getMidpoint(point);\n        other.closestPointToPoint(point, point2);\n        this.closestPointToPoint(point2, point);\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(point2);\n      }\n\n      return 0;\n    }\n\n    let closestDistanceSq = Infinity; // check all point distances\n\n    for (let i = 0; i < 3; i++) {\n      let dist;\n      const field = cornerFields[i];\n      const otherVec = other[field];\n      this.closestPointToPoint(otherVec, point);\n      dist = otherVec.distanceToSquared(point);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(otherVec);\n      }\n\n      const thisVec = this[field];\n      other.closestPointToPoint(thisVec, point);\n      dist = thisVec.distanceToSquared(point);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(thisVec);\n        if (target2) target2.copy(point);\n      }\n    }\n\n    for (let i = 0; i < 3; i++) {\n      const f11 = cornerFields[i];\n      const f12 = cornerFields[(i + 1) % 3];\n      line1.set(this[f11], this[f12]);\n\n      for (let i2 = 0; i2 < 3; i2++) {\n        const f21 = cornerFields[i2];\n        const f22 = cornerFields[(i2 + 1) % 3];\n        line2.set(other[f21], other[f22]);\n        closestPointsSegmentToSegment(line1, line2, point, point2);\n        const dist = point.distanceToSquared(point2);\n\n        if (dist < closestDistanceSq) {\n          closestDistanceSq = dist;\n          if (target1) target1.copy(point);\n          if (target2) target2.copy(point2);\n        }\n      }\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();","map":{"version":3,"sources":["/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/three-mesh-bvh/src/Utils/SeparatingAxisTriangle.js"],"names":["Triangle","Vector3","Line3","Sphere","SeparatingAxisBounds","closestPointsSegmentToSegment","sphereIntersectTriangle","SeparatingAxisTriangle","constructor","args","isSeparatingAxisTriangle","satAxes","Array","fill","map","satBounds","points","a","b","c","sphere","needsUpdate","intersectsSphere","prototype","update","arr","axis0","sab0","getNormal","setFromPoints","axis1","sab1","subVectors","axis2","sab2","axis3","sab3","closestPointToSegment","point1","point2","edge","distanceToSegment","segment","target1","target2","start","end","distSq","closestDistanceSq","Infinity","i","nexti","copy","distanceToSquared","closestPointToPoint","Math","sqrt","intersectsTriangle","saTri2","arr1","arr2","cachedSatBounds","cachedSatBounds2","cachedAxis","other","satBounds1","satAxes1","sb","sa","isSeparated","satBounds2","satAxes2","sa1","i2","sa2","crossVectors","distanceToPoint","target","point","distanceTo","distanceToTriangle","cornerFields","line1","line2","getMidpoint","dist","field","otherVec","thisVec","f11","f12","set","f21","f22"],"mappings":"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","sourcesContent":["import { Triangle, Vector3, Line3, Sphere } from 'three';\r\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\r\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\r\n\r\nexport class SeparatingAxisTriangle extends Triangle {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.isSeparatingAxisTriangle = true;\r\n\t\tthis.satAxes = new Array( 4 ).fill().map( () => new Vector3() );\r\n\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.points = [ this.a, this.b, this.c ];\r\n\t\tthis.sphere = new Sphere();\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\treturn sphereIntersectTriangle( sphere, this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nSeparatingAxisTriangle.prototype.update = ( function () {\r\n\r\n\tconst arr = new Array( 3 );\r\n\treturn function update() {\r\n\r\n\t\tconst a = this.a;\r\n\t\tconst b = this.b;\r\n\t\tconst c = this.c;\r\n\r\n\t\tarr[ 0 ] = this.a;\r\n\t\tarr[ 1 ] = this.b;\r\n\t\tarr[ 2 ] = this.c;\r\n\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst satBounds = this.satBounds;\r\n\r\n\t\tconst axis0 = satAxes[ 0 ];\r\n\t\tconst sab0 = satBounds[ 0 ];\r\n\t\tthis.getNormal( axis0 );\r\n\t\tsab0.setFromPoints( axis0, arr );\r\n\r\n\t\tconst axis1 = satAxes[ 1 ];\r\n\t\tconst sab1 = satBounds[ 1 ];\r\n\t\taxis1.subVectors( a, b );\r\n\t\tsab1.setFromPoints( axis1, arr );\r\n\r\n\t\tconst axis2 = satAxes[ 2 ];\r\n\t\tconst sab2 = satBounds[ 2 ];\r\n\t\taxis2.subVectors( b, c );\r\n\t\tsab2.setFromPoints( axis2, arr );\r\n\r\n\t\tconst axis3 = satAxes[ 3 ];\r\n\t\tconst sab3 = satBounds[ 3 ];\r\n\t\taxis3.subVectors( c, a );\r\n\t\tsab3.setFromPoints( axis3, arr );\r\n\r\n\t\tthis.sphere.setFromPoints( this.points );\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nSeparatingAxisTriangle.prototype.closestPointToSegment = ( function () {\r\n\r\n\tconst point1 = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst edge = new Line3();\r\n\r\n\treturn function distanceToSegment( segment, target1 = null, target2 = null ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tconst { start, end } = segment;\r\n\t\tconst points = this.points;\r\n\t\tlet distSq;\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check the triangle edges\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst nexti = ( i + 1 ) % 3;\r\n\t\t\tedge.start.copy( points[ i ] );\r\n\t\t\tedge.end.copy( points[ nexti ] );\r\n\r\n\t\t\tclosestPointsSegmentToSegment( edge, segment, point1, point2 );\r\n\r\n\t\t\tdistSq = point1.distanceToSquared( point2 );\r\n\t\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = distSq;\r\n\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// check end points\r\n\t\tthis.closestPointToPoint( start, point1 );\r\n\t\tdistSq = start.distanceToSquared( point1 );\r\n\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\tclosestDistanceSq = distSq;\r\n\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\tif ( target2 ) target2.copy( start );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closestPointToPoint( end, point1 );\r\n\t\tdistSq = end.distanceToSquared( point1 );\r\n\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\tclosestDistanceSq = distSq;\r\n\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\tif ( target2 ) target2.copy( end );\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nSeparatingAxisTriangle.prototype.intersectsTriangle = ( function () {\r\n\r\n\tconst saTri2 = new SeparatingAxisTriangle();\r\n\tconst arr1 = new Array( 3 );\r\n\tconst arr2 = new Array( 3 );\r\n\tconst cachedSatBounds = new SeparatingAxisBounds();\r\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\r\n\tconst cachedAxis = new Vector3();\r\n\treturn function intersectsTriangle( other ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! other.isSeparatingAxisTriangle ) {\r\n\r\n\t\t\tsaTri2.copy( other );\r\n\t\t\tsaTri2.update();\r\n\t\t\tother = saTri2;\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds1 = this.satBounds;\r\n\t\tconst satAxes1 = this.satAxes;\r\n\t\tarr2[ 0 ] = other.a;\r\n\t\tarr2[ 1 ] = other.b;\r\n\t\tarr2[ 2 ] = other.c;\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds1[ i ];\r\n\t\t\tconst sa = satAxes1[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds2 = other.satBounds;\r\n\t\tconst satAxes2 = other.satAxes;\r\n\t\tarr1[ 0 ] = this.a;\r\n\t\tarr1[ 1 ] = this.b;\r\n\t\tarr1[ 2 ] = this.c;\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds2[ i ];\r\n\t\t\tconst sa = satAxes2[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check crossed axes\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sa1 = satAxes1[ i ];\r\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\r\n\r\n\t\t\t\tconst sa2 = satAxes2[ i2 ];\r\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\r\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\r\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\r\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nSeparatingAxisTriangle.prototype.distanceToPoint = ( function () {\r\n\r\n\tconst target = new Vector3();\r\n\treturn function distanceToPoint( point ) {\r\n\r\n\t\tthis.closestPointToPoint( point, target );\r\n\t\treturn point.distanceTo( target );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nSeparatingAxisTriangle.prototype.distanceToTriangle = ( function () {\r\n\r\n\tconst point = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst cornerFields = [ 'a', 'b', 'c' ];\r\n\tconst line1 = new Line3();\r\n\tconst line2 = new Line3();\r\n\r\n\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\r\n\r\n\t\tif ( other.needsUpdate ) {\r\n\r\n\t\t\tother.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.intersectsTriangle( other ) ) {\r\n\r\n\t\t\t// TODO: This will not result in a point that lies on\r\n\t\t\t// the intersection line of the triangles\r\n\t\t\tif ( target1 || target2 ) {\r\n\r\n\t\t\t\tthis.getMidpoint( point );\r\n\t\t\t\tother.closestPointToPoint( point, point2 );\r\n\t\t\t\tthis.closestPointToPoint( point2, point );\r\n\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check all point distances\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tlet dist;\r\n\t\t\tconst field = cornerFields[ i ];\r\n\t\t\tconst otherVec = other[ field ];\r\n\t\t\tthis.closestPointToPoint( otherVec, point );\r\n\r\n\t\t\tdist = otherVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( otherVec );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tconst thisVec = this[ field ];\r\n\t\t\tother.closestPointToPoint( thisVec, point );\r\n\r\n\t\t\tdist = thisVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( thisVec );\r\n\t\t\t\tif ( target2 ) target2.copy( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst f11 = cornerFields[ i ];\r\n\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\r\n\t\t\tline1.set( this[ f11 ], this[ f12 ] );\r\n\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\r\n\r\n\t\t\t\tconst f21 = cornerFields[ i2 ];\r\n\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\r\n\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\r\n\r\n\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\r\n\r\n\t\t\t\tconst dist = point.distanceToSquared( point2 );\r\n\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n"]},"metadata":{},"sourceType":"module"}