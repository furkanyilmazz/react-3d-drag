import * as React from 'react';
import { Mesh } from 'three';
import { ReactThreeFiber, Overwrite } from 'react-three-fiber';
import { Reflector as ReflectorImpl, ReflectorOptions } from 'three/examples/jsm/objects/Reflector';
export declare type Reflector = Overwrite<ReactThreeFiber.Object3DNode<ReflectorImpl, typeof ReflectorImpl>, {
    children: React.ReactElement<ReactThreeFiber.Object3DNode<Mesh, typeof Mesh>>;
}>;
declare global {
    namespace JSX {
        interface IntrinsicElements {
            reflectorImpl: Reflector;
        }
    }
}
declare type Props = ReflectorOptions & Omit<JSX.IntrinsicElements['mesh'], 'args'> & {
    children: React.ReactElement<any>;
};
export declare const Reflector: React.ForwardRefExoticComponent<Pick<Props, "attach" | "attachArray" | "attachObject" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "geometry" | "material" | "morphTargetInfluences" | "morphTargetDictionary" | "isMesh" | "type" | "updateMorphTargets" | "raycast" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "visible" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "onClick" | "onContextMenu" | "onDoubleClick" | "onPointerUp" | "onPointerDown" | "onPointerOver" | "onPointerOut" | "onPointerMove" | "onPointerMissed" | "onWheel" | "color" | "encoding" | "textureWidth" | "textureHeight" | "clipBias" | "shader"> & React.RefAttributes<unknown>>;
export {};
