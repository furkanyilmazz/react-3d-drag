{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, RGBFormat, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType, Vector2 } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { MeshReflectorMaterial } from '../materials/MeshReflectorMaterial.js';\nextend({\n  MeshReflectorMaterial\n});\nconst MIPMAP_NUM = 8;\nconst Reflector = /*#__PURE__*/React.forwardRef(({\n  mixBlur = 0.0,\n  mixStrength = 0.5,\n  resolution = 256,\n  args = [1, 1],\n  minDepthThreshold = 0.9,\n  maxDepthThreshold = 1,\n  depthScale = 0,\n  depthToBlurRatioBias = 0.25,\n  mirror,\n  children,\n  debug = 0,\n  distortion = 1,\n  distortionMap,\n  ...props\n}, ref) => {\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const meshRef = React.useRef(null);\n  const [reflectorPlane] = React.useState(() => new Plane());\n  const [normal] = React.useState(() => new Vector3());\n  const [reflectorWorldPosition] = React.useState(() => new Vector3());\n  const [cameraWorldPosition] = React.useState(() => new Vector3());\n  const [rotationMatrix] = React.useState(() => new Matrix4());\n  const [lookAtPosition] = React.useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = React.useState(() => new Vector4());\n  const [view] = React.useState(() => new Vector3());\n  const [target] = React.useState(() => new Vector3());\n  const [q] = React.useState(() => new Vector4());\n  const [textureMatrix] = React.useState(() => new Matrix4());\n  const [virtualCamera] = React.useState(() => new PerspectiveCamera());\n  const [renderTargets] = React.useState(() => {\n    const renderTargets = [];\n    const pars = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n\n    for (let i = 0; i < MIPMAP_NUM; i++) {\n      const res = Math.max(8, Math.round(resolution / Math.pow(2, i)));\n      const renderTarget = new WebGLRenderTarget(res, res, pars);\n      renderTarget.texture.generateMipmaps = false;\n      renderTargets.push(renderTarget);\n    }\n\n    return renderTargets;\n  });\n  const beforeRender = React.useCallback(() => {\n    reflectorWorldPosition.setFromMatrixPosition(meshRef.current.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(meshRef.current.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(meshRef.current.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, [camera.far, camera.matrixWorld, camera.projectionMatrix, cameraWorldPosition, clipPlane, lookAtPosition, normal, q, reflectorPlane, reflectorWorldPosition, rotationMatrix, target, textureMatrix, view, virtualCamera]);\n  const [fbo1, reflectorProps] = React.useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n\n    if (depthScale > 0) {\n      fbo1.depthBuffer = true;\n      fbo1.depthTexture = new DepthTexture(resolution, resolution);\n      fbo1.depthTexture.format = DepthFormat;\n      fbo1.depthTexture.type = UnsignedShortType;\n    }\n\n    const mipmaps = renderTargets.reduce((acc, fbo, index) => {\n      acc[`u_mipmap_${index}`] = fbo.texture;\n      acc[`u_mipmap_res_${index}`] = new Vector2(fbo.width, fbo.height);\n      return acc;\n    }, {});\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      debug,\n      distortion,\n      distortionMap,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': distortionMap ? '' : undefined,\n      ...mipmaps\n    };\n    return [fbo1, reflectorProps];\n  }, [gl, textureMatrix, resolution, mirror, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, debug, distortion, distortionMap, renderTargets]);\n  useFrame(() => {\n    if (!(meshRef != null && meshRef.current)) return;\n    meshRef.current.visible = false;\n    beforeRender();\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    gl.render(scene, virtualCamera);\n\n    if (mixBlur !== 0) {\n      renderTargets.forEach(fbo => {\n        gl.setRenderTarget(fbo);\n        gl.state.buffers.depth.setMask(true);\n        gl.render(scene, virtualCamera);\n      });\n    }\n\n    meshRef.current.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: mergeRefs([meshRef, ref])\n  }, props), /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    args: args\n  }), children ? children('meshReflectorMaterial', reflectorProps) : /*#__PURE__*/React.createElement(\"meshReflectorMaterial\", reflectorProps));\n});\nexport { Reflector };","map":{"version":3,"sources":["/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/@react-three/drei/core/Reflector.js"],"names":["_extends","React","Plane","Vector3","Matrix4","Vector4","PerspectiveCamera","LinearFilter","RGBFormat","WebGLRenderTarget","DepthTexture","DepthFormat","UnsignedShortType","Vector2","extend","useThree","useFrame","mergeRefs","MeshReflectorMaterial","MIPMAP_NUM","Reflector","forwardRef","mixBlur","mixStrength","resolution","args","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","mirror","children","debug","distortion","distortionMap","props","ref","gl","camera","scene","meshRef","useRef","reflectorPlane","useState","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","virtualCamera","renderTargets","pars","minFilter","magFilter","format","encoding","outputEncoding","i","res","Math","max","round","pow","renderTarget","texture","generateMipmaps","push","beforeRender","useCallback","setFromMatrixPosition","current","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","sign","elements","w","multiplyScalar","fbo1","reflectorProps","useMemo","parameters","depthBuffer","depthTexture","type","mipmaps","reduce","acc","fbo","index","width","height","tDiffuse","tDepth","undefined","visible","setRenderTarget","state","buffers","depth","setMask","render","forEach","createElement"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, RGBFormat, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType, Vector2 } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { MeshReflectorMaterial } from '../materials/MeshReflectorMaterial.js';\n\nextend({\n  MeshReflectorMaterial\n});\nconst MIPMAP_NUM = 8;\nconst Reflector = /*#__PURE__*/React.forwardRef(({\n  mixBlur = 0.0,\n  mixStrength = 0.5,\n  resolution = 256,\n  args = [1, 1],\n  minDepthThreshold = 0.9,\n  maxDepthThreshold = 1,\n  depthScale = 0,\n  depthToBlurRatioBias = 0.25,\n  mirror,\n  children,\n  debug = 0,\n  distortion = 1,\n  distortionMap,\n  ...props\n}, ref) => {\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const meshRef = React.useRef(null);\n  const [reflectorPlane] = React.useState(() => new Plane());\n  const [normal] = React.useState(() => new Vector3());\n  const [reflectorWorldPosition] = React.useState(() => new Vector3());\n  const [cameraWorldPosition] = React.useState(() => new Vector3());\n  const [rotationMatrix] = React.useState(() => new Matrix4());\n  const [lookAtPosition] = React.useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = React.useState(() => new Vector4());\n  const [view] = React.useState(() => new Vector3());\n  const [target] = React.useState(() => new Vector3());\n  const [q] = React.useState(() => new Vector4());\n  const [textureMatrix] = React.useState(() => new Matrix4());\n  const [virtualCamera] = React.useState(() => new PerspectiveCamera());\n  const [renderTargets] = React.useState(() => {\n    const renderTargets = [];\n    const pars = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n\n    for (let i = 0; i < MIPMAP_NUM; i++) {\n      const res = Math.max(8, Math.round(resolution / Math.pow(2, i)));\n      const renderTarget = new WebGLRenderTarget(res, res, pars);\n      renderTarget.texture.generateMipmaps = false;\n      renderTargets.push(renderTarget);\n    }\n\n    return renderTargets;\n  });\n  const beforeRender = React.useCallback(() => {\n    reflectorWorldPosition.setFromMatrixPosition(meshRef.current.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(meshRef.current.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(meshRef.current.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, [camera.far, camera.matrixWorld, camera.projectionMatrix, cameraWorldPosition, clipPlane, lookAtPosition, normal, q, reflectorPlane, reflectorWorldPosition, rotationMatrix, target, textureMatrix, view, virtualCamera]);\n  const [fbo1, reflectorProps] = React.useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n\n    if (depthScale > 0) {\n      fbo1.depthBuffer = true;\n      fbo1.depthTexture = new DepthTexture(resolution, resolution);\n      fbo1.depthTexture.format = DepthFormat;\n      fbo1.depthTexture.type = UnsignedShortType;\n    }\n\n    const mipmaps = renderTargets.reduce((acc, fbo, index) => {\n      acc[`u_mipmap_${index}`] = fbo.texture;\n      acc[`u_mipmap_res_${index}`] = new Vector2(fbo.width, fbo.height);\n      return acc;\n    }, {});\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      debug,\n      distortion,\n      distortionMap,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': distortionMap ? '' : undefined,\n      ...mipmaps\n    };\n    return [fbo1, reflectorProps];\n  }, [gl, textureMatrix, resolution, mirror, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, debug, distortion, distortionMap, renderTargets]);\n  useFrame(() => {\n    if (!(meshRef != null && meshRef.current)) return;\n    meshRef.current.visible = false;\n    beforeRender();\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    gl.render(scene, virtualCamera);\n\n    if (mixBlur !== 0) {\n      renderTargets.forEach(fbo => {\n        gl.setRenderTarget(fbo);\n        gl.state.buffers.depth.setMask(true);\n        gl.render(scene, virtualCamera);\n      });\n    }\n\n    meshRef.current.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: mergeRefs([meshRef, ref])\n  }, props), /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    args: args\n  }), children ? children('meshReflectorMaterial', reflectorProps) : /*#__PURE__*/React.createElement(\"meshReflectorMaterial\", reflectorProps));\n});\n\nexport { Reflector };\n"]},"metadata":{},"sourceType":"module"}