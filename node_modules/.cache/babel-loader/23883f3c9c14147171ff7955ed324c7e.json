{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _defineProperty from \"/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Vector3, BufferAttribute, Box3 } from 'three';\nimport { CENTER } from './Constants.js';\nimport { BYTES_PER_NODE, IS_LEAFNODE_FLAG, buildPackedTree } from './buildFunctions.js';\nimport { OrientedBox } from './Utils/OrientedBox.js';\nimport { SeparatingAxisTriangle } from './Utils/SeparatingAxisTriangle.js';\nimport { setTriangle } from './Utils/TriangleUtils.js';\nimport { raycast as _raycast, raycastFirst as _raycastFirst, shapecast as _shapecast, intersectsGeometry as _intersectsGeometry, setBuffer, clearBuffer } from './castFunctions.js';\nimport { arrayToBox, iterateOverTriangles } from './Utils/BufferNodeUtils.js';\nvar SKIP_GENERATION = Symbol('skip tree generation');\nvar obb = new OrientedBox();\nvar temp = new Vector3();\nvar tri2 = new SeparatingAxisTriangle();\nvar temp1 = new Vector3();\nvar temp2 = new Vector3();\nvar tempBox = new Box3();\nvar triangle = new SeparatingAxisTriangle();\n\nvar MeshBVH = /*#__PURE__*/function () {\n  function MeshBVH(geometry) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, MeshBVH);\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('MeshBVH: Only BufferGeometries are supported.');\n    } else if (geometry.attributes.position.isInterleavedBufferAttribute) {\n      throw new Error('MeshBVH: InterleavedBufferAttribute is not supported for the position attribute.');\n    } else if (geometry.index && geometry.index.isInterleavedBufferAttribute) {\n      throw new Error('MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.');\n    } // default options\n\n\n    options = Object.assign(_defineProperty({\n      strategy: CENTER,\n      maxDepth: 40,\n      maxLeafTris: 10,\n      verbose: true,\n      setBoundingBox: true\n    }, SKIP_GENERATION, false), options);\n    options.strategy = Math.max(0, Math.min(2, options.strategy));\n    this._roots = null;\n\n    if (!options[SKIP_GENERATION]) {\n      this._roots = buildPackedTree(geometry, options);\n\n      if (!geometry.boundingBox && options.setBoundingBox) {\n        geometry.boundingBox = this.getBoundingBox(new Box3());\n      }\n    } // retain references to the geometry so we can use them it without having to\n    // take a geometry reference in every function.\n\n\n    this.geometry = geometry;\n  }\n\n  _createClass(MeshBVH, [{\n    key: \"refit\",\n    value: function refit() {\n      var nodeIndices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var terminationIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (nodeIndices && Array.isArray(nodeIndices)) {\n        nodeIndices = new Set(nodeIndices);\n      }\n\n      if (terminationIndices && Array.isArray(terminationIndices)) {\n        terminationIndices = new Set(terminationIndices);\n      }\n\n      var geometry = this.geometry;\n      var indexArr = geometry.index.array;\n      var posArr = geometry.attributes.position.array;\n      var buffer, uint32Array, uint16Array, float32Array;\n      var byteOffset = 0;\n      var roots = this._roots;\n\n      for (var i = 0, l = roots.length; i < l; i++) {\n        buffer = roots[i];\n        uint32Array = new Uint32Array(buffer);\n        uint16Array = new Uint16Array(buffer);\n        float32Array = new Float32Array(buffer);\n\n        _traverse(0, byteOffset);\n\n        byteOffset += buffer.byteLength;\n      }\n\n      function _traverse(node32Index, byteOffset) {\n        var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        var node16Index = node32Index * 2;\n        var isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;\n\n        if (isLeaf) {\n          var offset = uint32Array[node32Index + 6];\n          var count = uint16Array[node16Index + 14];\n          var minx = Infinity;\n          var miny = Infinity;\n          var minz = Infinity;\n          var maxx = -Infinity;\n          var maxy = -Infinity;\n          var maxz = -Infinity;\n\n          for (var _i = 3 * offset, _l = 3 * (offset + count); _i < _l; _i++) {\n            var index3 = indexArr[_i] * 3;\n            var x = posArr[index3 + 0];\n            var y = posArr[index3 + 1];\n            var z = posArr[index3 + 2];\n            if (x < minx) minx = x;\n            if (x > maxx) maxx = x;\n            if (y < miny) miny = y;\n            if (y > maxy) maxy = y;\n            if (z < minz) minz = z;\n            if (z > maxz) maxz = z;\n          }\n\n          if (float32Array[node32Index + 0] !== minx || float32Array[node32Index + 1] !== miny || float32Array[node32Index + 2] !== minz || float32Array[node32Index + 3] !== maxx || float32Array[node32Index + 4] !== maxy || float32Array[node32Index + 5] !== maxz) {\n            float32Array[node32Index + 0] = minx;\n            float32Array[node32Index + 1] = miny;\n            float32Array[node32Index + 2] = minz;\n            float32Array[node32Index + 3] = maxx;\n            float32Array[node32Index + 4] = maxy;\n            float32Array[node32Index + 5] = maxz;\n            return true;\n          } else {\n            return false;\n          }\n        } else {\n          var left = node32Index + 8;\n          var right = uint32Array[node32Index + 6]; // the indentifying node indices provided by the shapecast function include offsets of all\n          // root buffers to guarantee they're unique between roots so offset left and right indices here.\n\n          var offsetLeft = left + byteOffset;\n          var offsetRight = right + byteOffset;\n          var leftChange = false;\n          var forceLeft = force || terminationIndices && terminationIndices.has(offsetLeft);\n          var traverseLeft = forceLeft || (nodeIndices ? nodeIndices.has(offsetLeft) : true);\n\n          if (traverseLeft) {\n            leftChange = _traverse(left, byteOffset, forceLeft);\n          }\n\n          var rightChange = false;\n          var forceRight = force || terminationIndices && terminationIndices.has(offsetRight);\n          var traverseRight = forceRight || (nodeIndices ? nodeIndices.has(offsetRight) : true);\n\n          if (traverseRight) {\n            rightChange = _traverse(right, byteOffset, forceRight);\n          }\n\n          var didChange = leftChange || rightChange;\n\n          if (didChange) {\n            for (var _i2 = 0; _i2 < 3; _i2++) {\n              var lefti = left + _i2;\n              var righti = right + _i2;\n              var minLeftValue = float32Array[lefti];\n              var maxLeftValue = float32Array[lefti + 3];\n              var minRightValue = float32Array[righti];\n              var maxRightValue = float32Array[righti + 3];\n              float32Array[node32Index + _i2] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n              float32Array[node32Index + _i2 + 3] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n            }\n          }\n\n          return didChange;\n        }\n      }\n    }\n  }, {\n    key: \"traverse\",\n    value: function traverse(callback) {\n      var rootIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var buffer = this._roots[rootIndex];\n      var uint32Array = new Uint32Array(buffer);\n      var uint16Array = new Uint16Array(buffer);\n\n      _traverse(0);\n\n      function _traverse(node32Index) {\n        var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var node16Index = node32Index * 2;\n        var isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;\n\n        if (isLeaf) {\n          var offset = uint32Array[node32Index + 6];\n          var count = uint16Array[node16Index + 14];\n          callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), offset, count);\n        } else {\n          var left = node32Index + BYTES_PER_NODE / 4;\n          var right = uint32Array[node32Index + 6];\n          var splitAxis = uint32Array[node32Index + 7];\n          var stopTraversal = callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), splitAxis);\n\n          if (!stopTraversal) {\n            _traverse(left, depth + 1);\n\n            _traverse(right, depth + 1);\n          }\n        }\n      }\n    }\n    /* Core Cast Functions */\n\n  }, {\n    key: \"raycast\",\n    value: function raycast(mesh, raycaster, ray, intersects) {\n      var geometry = this.geometry;\n\n      var _iterator = _createForOfIteratorHelper(this._roots),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var root = _step.value;\n          setBuffer(root);\n\n          _raycast(0, mesh, geometry, raycaster, ray, intersects);\n\n          clearBuffer();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"raycastFirst\",\n    value: function raycastFirst(mesh, raycaster, ray) {\n      var geometry = this.geometry;\n      var closestResult = null;\n\n      var _iterator2 = _createForOfIteratorHelper(this._roots),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var root = _step2.value;\n          setBuffer(root);\n\n          var result = _raycastFirst(0, mesh, geometry, raycaster, ray);\n\n          clearBuffer();\n\n          if (result != null && (closestResult == null || result.distance < closestResult.distance)) {\n            closestResult = result;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return closestResult;\n    }\n  }, {\n    key: \"intersectsGeometry\",\n    value: function intersectsGeometry(mesh, otherGeometry, geomToMesh) {\n      var geometry = this.geometry;\n      var result = false;\n\n      var _iterator3 = _createForOfIteratorHelper(this._roots),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var root = _step3.value;\n          setBuffer(root);\n          result = _intersectsGeometry(0, mesh, geometry, otherGeometry, geomToMesh);\n          clearBuffer();\n\n          if (result) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"shapecast\",\n    value: function shapecast(mesh, callbacks, _intersectsTriangleFunc, _orderNodesFunc) {\n      var geometry = this.geometry;\n\n      if (callbacks instanceof Function) {\n        if (_intersectsTriangleFunc) {\n          // Support the previous function signature that provided three sequential index buffer\n          // indices here.\n          var originalTriangleFunc = _intersectsTriangleFunc;\n\n          _intersectsTriangleFunc = function _intersectsTriangleFunc(tri, index, contained, depth) {\n            var i3 = index * 3;\n            return originalTriangleFunc(tri, i3, i3 + 1, i3 + 2, contained, depth);\n          };\n        }\n\n        callbacks = {\n          boundsTraverseOrder: _orderNodesFunc,\n          intersectsBounds: callbacks,\n          intersectsTriangle: _intersectsTriangleFunc,\n          intersectsRange: null\n        };\n        console.warn('MeshBVH: Shapecast function signature has changed and now takes an object of callbacks as a second argument. See docs for new signature.');\n      }\n\n      var _callbacks = callbacks,\n          boundsTraverseOrder = _callbacks.boundsTraverseOrder,\n          intersectsBounds = _callbacks.intersectsBounds,\n          intersectsRange = _callbacks.intersectsRange,\n          intersectsTriangle = _callbacks.intersectsTriangle;\n\n      if (intersectsRange && intersectsTriangle) {\n        var originalIntersectsRange = intersectsRange;\n\n        intersectsRange = function intersectsRange(offset, count, contained, depth, nodeIndex) {\n          if (!originalIntersectsRange(offset, count, contained, depth, nodeIndex)) {\n            return iterateOverTriangles(offset, count, geometry, intersectsTriangle, contained, depth, triangle);\n          }\n\n          return true;\n        };\n      } else if (!intersectsRange) {\n        if (intersectsTriangle) {\n          intersectsRange = function intersectsRange(offset, count, contained, depth) {\n            return iterateOverTriangles(offset, count, geometry, intersectsTriangle, contained, depth, triangle);\n          };\n        } else {\n          intersectsRange = function intersectsRange(offset, count, contained) {\n            return contained;\n          };\n        }\n      }\n\n      var result = false;\n      var byteOffset = 0;\n\n      var _iterator4 = _createForOfIteratorHelper(this._roots),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var root = _step4.value;\n          setBuffer(root);\n          result = _shapecast(0, mesh, geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset);\n          clearBuffer();\n\n          if (result) {\n            break;\n          }\n\n          byteOffset += root.byteLength;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return result;\n    }\n    /* Derived Cast Functions */\n\n  }, {\n    key: \"intersectsBox\",\n    value: function intersectsBox(mesh, box, boxToMesh) {\n      obb.set(box.min, box.max, boxToMesh);\n      obb.update();\n      return this.shapecast(mesh, {\n        intersectsBounds: function intersectsBounds(box) {\n          return obb.intersectsBox(box);\n        },\n        intersectsTriangle: function intersectsTriangle(tri) {\n          return obb.intersectsTriangle(tri);\n        }\n      });\n    }\n  }, {\n    key: \"intersectsSphere\",\n    value: function intersectsSphere(mesh, sphere) {\n      return this.shapecast(mesh, {\n        intersectsBounds: function intersectsBounds(box) {\n          return sphere.intersectsBox(box);\n        },\n        intersectsTriangle: function intersectsTriangle(tri) {\n          return tri.intersectsSphere(sphere);\n        }\n      });\n    }\n  }, {\n    key: \"closestPointToGeometry\",\n    value: function closestPointToGeometry(mesh, otherGeometry, geometryToBvh) {\n      var target1 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var target2 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var minThreshold = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var maxThreshold = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Infinity;\n\n      if (!otherGeometry.boundingBox) {\n        otherGeometry.computeBoundingBox();\n      }\n\n      obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n      obb.update();\n      var pos = otherGeometry.attributes.position;\n      var index = otherGeometry.index;\n      var tempTarget1 = null;\n      var tempTarget2 = null;\n\n      if (target1) {\n        tempTarget1 = temp1;\n      }\n\n      if (target2) {\n        tempTarget2 = temp2;\n      }\n\n      var closestDistance = Infinity;\n      this.shapecast(mesh, {\n        boundsTraverseOrder: function boundsTraverseOrder(box) {\n          return obb.distanceToBox(box, Math.min(closestDistance, maxThreshold));\n        },\n        intersectsBounds: function intersectsBounds(box, isLeaf, score) {\n          return score < closestDistance && score < maxThreshold;\n        },\n        intersectsTriangle: function intersectsTriangle(tri) {\n          if (tri.needsUpdate) {\n            tri.update();\n          }\n\n          var sphere1 = tri.sphere;\n\n          for (var i2 = 0, l2 = index.count; i2 < l2; i2 += 3) {\n            setTriangle(tri2, i2, index, pos);\n            tri2.a.applyMatrix4(geometryToBvh);\n            tri2.b.applyMatrix4(geometryToBvh);\n            tri2.c.applyMatrix4(geometryToBvh);\n            tri2.sphere.setFromPoints(tri2.points);\n            var sphere2 = tri2.sphere;\n            var sphereDist = sphere2.center.distanceTo(sphere1.center) - sphere2.radius - sphere1.radius;\n\n            if (sphereDist > closestDistance) {\n              continue;\n            }\n\n            tri2.update();\n            var dist = tri.distanceToTriangle(tri2, tempTarget1, tempTarget2);\n\n            if (dist < closestDistance) {\n              if (target1) {\n                target1.copy(tempTarget1);\n              }\n\n              if (target2) {\n                target2.copy(tempTarget2);\n              }\n\n              closestDistance = dist;\n            } // stop traversal if we find a point that's under the given threshold\n\n\n            if (dist < minThreshold) {\n              return true;\n            }\n          }\n\n          return false;\n        }\n      });\n      return closestDistance;\n    }\n  }, {\n    key: \"distanceToGeometry\",\n    value: function distanceToGeometry(mesh, geom, matrix, minThreshold, maxThreshold) {\n      return this.closestPointToGeometry(mesh, geom, matrix, null, null, minThreshold, maxThreshold);\n    }\n  }, {\n    key: \"closestPointToPoint\",\n    value: function closestPointToPoint(mesh, point, target) {\n      var minThreshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var maxThreshold = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Infinity;\n      // early out if under minThreshold\n      // skip checking if over maxThreshold\n      // set minThreshold = maxThreshold to quickly check if a point is within a threshold\n      // returns Infinity if no value found\n      var minThresholdSq = minThreshold * minThreshold;\n      var maxThresholdSq = maxThreshold * maxThreshold;\n      var closestDistanceSq = Infinity;\n      this.shapecast(mesh, {\n        boundsTraverseOrder: function boundsTraverseOrder(box) {\n          temp.copy(point).clamp(box.min, box.max);\n          return temp.distanceToSquared(point);\n        },\n        intersectsBounds: function intersectsBounds(box, isLeaf, score) {\n          return score < closestDistanceSq && score < maxThresholdSq;\n        },\n        intersectsTriangle: function intersectsTriangle(tri) {\n          tri.closestPointToPoint(point, temp);\n          var distSq = point.distanceToSquared(temp);\n\n          if (distSq < closestDistanceSq) {\n            if (target) {\n              target.copy(temp);\n            }\n\n            closestDistanceSq = distSq;\n          }\n\n          if (distSq < minThresholdSq) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      });\n      return Math.sqrt(closestDistanceSq);\n    }\n  }, {\n    key: \"distanceToPoint\",\n    value: function distanceToPoint(mesh, point, minThreshold, maxThreshold) {\n      return this.closestPointToPoint(mesh, point, null, minThreshold, maxThreshold);\n    }\n  }, {\n    key: \"getBoundingBox\",\n    value: function getBoundingBox(target) {\n      target.makeEmpty();\n      var roots = this._roots;\n      roots.forEach(function (buffer) {\n        arrayToBox(0, new Float32Array(buffer), tempBox);\n        target.union(tempBox);\n      });\n      return target;\n    }\n  }], [{\n    key: \"serialize\",\n    value: function serialize(bvh, geometry) {\n      var copyIndexBuffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var rootData = bvh._roots;\n      var indexAttribute = geometry.getIndex();\n      var result = {\n        roots: rootData,\n        index: copyIndexBuffer ? indexAttribute.array.slice() : indexAttribute.array\n      };\n      return result;\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(data, geometry) {\n      var setIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var index = data.index,\n          roots = data.roots;\n      var bvh = new MeshBVH(geometry, _defineProperty({}, SKIP_GENERATION, true));\n      bvh._roots = roots;\n\n      if (setIndex) {\n        var indexAttribute = geometry.getIndex();\n\n        if (indexAttribute === null) {\n          var newIndex = new BufferAttribute(data.index, 1, false);\n          geometry.setIndex(newIndex);\n        } else if (indexAttribute.array !== index) {\n          indexAttribute.array.set(index);\n          indexAttribute.needsUpdate = true;\n        }\n      }\n\n      return bvh;\n    }\n  }]);\n\n  return MeshBVH;\n}();\n\nexport { MeshBVH as default };","map":{"version":3,"sources":["/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/three-mesh-bvh/src/MeshBVH.js"],"names":["Vector3","BufferAttribute","Box3","CENTER","BYTES_PER_NODE","IS_LEAFNODE_FLAG","buildPackedTree","OrientedBox","SeparatingAxisTriangle","setTriangle","raycast","raycastFirst","shapecast","intersectsGeometry","setBuffer","clearBuffer","arrayToBox","iterateOverTriangles","SKIP_GENERATION","Symbol","obb","temp","tri2","temp1","temp2","tempBox","triangle","MeshBVH","geometry","options","isBufferGeometry","Error","attributes","position","isInterleavedBufferAttribute","index","Object","assign","strategy","maxDepth","maxLeafTris","verbose","setBoundingBox","Math","max","min","_roots","boundingBox","getBoundingBox","nodeIndices","terminationIndices","Array","isArray","Set","indexArr","array","posArr","buffer","uint32Array","uint16Array","float32Array","byteOffset","roots","i","l","length","Uint32Array","Uint16Array","Float32Array","_traverse","byteLength","node32Index","force","node16Index","isLeaf","offset","count","minx","Infinity","miny","minz","maxx","maxy","maxz","index3","x","y","z","left","right","offsetLeft","offsetRight","leftChange","forceLeft","has","traverseLeft","rightChange","forceRight","traverseRight","didChange","lefti","righti","minLeftValue","maxLeftValue","minRightValue","maxRightValue","callback","rootIndex","depth","splitAxis","stopTraversal","mesh","raycaster","ray","intersects","root","closestResult","result","distance","otherGeometry","geomToMesh","callbacks","_intersectsTriangleFunc","_orderNodesFunc","Function","originalTriangleFunc","tri","contained","i3","boundsTraverseOrder","intersectsBounds","intersectsTriangle","intersectsRange","console","warn","originalIntersectsRange","nodeIndex","box","boxToMesh","set","update","intersectsBox","sphere","intersectsSphere","geometryToBvh","target1","target2","minThreshold","maxThreshold","computeBoundingBox","pos","tempTarget1","tempTarget2","closestDistance","distanceToBox","score","needsUpdate","sphere1","i2","l2","a","applyMatrix4","b","c","setFromPoints","points","sphere2","sphereDist","center","distanceTo","radius","dist","distanceToTriangle","copy","geom","matrix","closestPointToGeometry","point","target","minThresholdSq","maxThresholdSq","closestDistanceSq","clamp","distanceToSquared","closestPointToPoint","distSq","sqrt","makeEmpty","forEach","union","bvh","copyIndexBuffer","rootData","indexAttribute","getIndex","slice","data","setIndex","newIndex"],"mappings":"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","sourcesContent":["import { Vector3, BufferAttribute, Box3 } from 'three';\r\nimport { CENTER } from './Constants.js';\r\nimport { BYTES_PER_NODE, IS_LEAFNODE_FLAG, buildPackedTree } from './buildFunctions.js';\r\nimport { OrientedBox } from './Utils/OrientedBox.js';\r\nimport { SeparatingAxisTriangle } from './Utils/SeparatingAxisTriangle.js';\r\nimport { setTriangle } from './Utils/TriangleUtils.js';\r\nimport {\r\n\traycast,\r\n\traycastFirst,\r\n\tshapecast,\r\n\tintersectsGeometry,\r\n\tsetBuffer,\r\n\tclearBuffer,\r\n} from './castFunctions.js';\r\nimport { arrayToBox, iterateOverTriangles } from './Utils/BufferNodeUtils.js';\r\n\r\nconst SKIP_GENERATION = Symbol( 'skip tree generation' );\r\n\r\nconst obb = new OrientedBox();\r\nconst temp = new Vector3();\r\nconst tri2 = new SeparatingAxisTriangle();\r\nconst temp1 = new Vector3();\r\nconst temp2 = new Vector3();\r\nconst tempBox = new Box3();\r\nconst triangle = new SeparatingAxisTriangle();\r\n\r\nexport default class MeshBVH {\r\n\r\n\tstatic serialize( bvh, geometry, copyIndexBuffer = true ) {\r\n\r\n\t\tconst rootData = bvh._roots;\r\n\t\tconst indexAttribute = geometry.getIndex();\r\n\t\tconst result = {\r\n\t\t\troots: rootData,\r\n\t\t\tindex: copyIndexBuffer ? indexAttribute.array.slice() : indexAttribute.array,\r\n\t\t};\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tstatic deserialize( data, geometry, setIndex = true ) {\r\n\r\n\t\tconst { index, roots } = data;\r\n\t\tconst bvh = new MeshBVH( geometry, { [ SKIP_GENERATION ]: true } );\r\n\t\tbvh._roots = roots;\r\n\r\n\t\tif ( setIndex ) {\r\n\r\n\t\t\tconst indexAttribute = geometry.getIndex();\r\n\t\t\tif ( indexAttribute === null ) {\r\n\r\n\t\t\t\tconst newIndex = new BufferAttribute( data.index, 1, false );\r\n\t\t\t\tgeometry.setIndex( newIndex );\r\n\r\n\t\t\t} else if ( indexAttribute.array !== index ) {\r\n\r\n\t\t\t\tindexAttribute.array.set( index );\r\n\t\t\t\tindexAttribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn bvh;\r\n\r\n\t}\r\n\r\n\tconstructor( geometry, options = {} ) {\r\n\r\n\t\tif ( ! geometry.isBufferGeometry ) {\r\n\r\n\t\t\tthrow new Error( 'MeshBVH: Only BufferGeometries are supported.' );\r\n\r\n\t\t} else if ( geometry.attributes.position.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\tthrow new Error( 'MeshBVH: InterleavedBufferAttribute is not supported for the position attribute.' );\r\n\r\n\t\t} else if ( geometry.index && geometry.index.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\tthrow new Error( 'MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.' );\r\n\r\n\t\t}\r\n\r\n\t\t// default options\r\n\t\toptions = Object.assign( {\r\n\r\n\t\t\tstrategy: CENTER,\r\n\t\t\tmaxDepth: 40,\r\n\t\t\tmaxLeafTris: 10,\r\n\t\t\tverbose: true,\r\n\r\n\t\t\tsetBoundingBox: true,\r\n\r\n\t\t\t// undocumented options\r\n\r\n\t\t\t// Whether to skip generating the tree. Used for deserialization.\r\n\t\t\t[ SKIP_GENERATION ]: false\r\n\r\n\t\t}, options );\r\n\t\toptions.strategy = Math.max( 0, Math.min( 2, options.strategy ) );\r\n\r\n\t\tthis._roots = null;\r\n\t\tif ( ! options[ SKIP_GENERATION ] ) {\r\n\r\n\t\t\tthis._roots = buildPackedTree( geometry, options );\r\n\r\n\t\t\tif ( ! geometry.boundingBox && options.setBoundingBox ) {\r\n\r\n\t\t\t\tgeometry.boundingBox = this.getBoundingBox( new Box3() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// retain references to the geometry so we can use them it without having to\r\n\t\t// take a geometry reference in every function.\r\n\t\tthis.geometry = geometry;\r\n\r\n\t}\r\n\r\n\trefit( nodeIndices = null, terminationIndices = null ) {\r\n\r\n\t\tif ( nodeIndices && Array.isArray( nodeIndices ) ) {\r\n\r\n\t\t\tnodeIndices = new Set( nodeIndices );\r\n\r\n\t\t}\r\n\r\n\t\tif ( terminationIndices && Array.isArray( terminationIndices ) ) {\r\n\r\n\t\t\tterminationIndices = new Set( terminationIndices );\r\n\r\n\t\t}\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst indexArr = geometry.index.array;\r\n\t\tconst posArr = geometry.attributes.position.array;\r\n\t\tlet buffer, uint32Array, uint16Array, float32Array;\r\n\t\tlet byteOffset = 0;\r\n\t\tconst roots = this._roots;\r\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\r\n\r\n\t\t\tbuffer = roots[ i ];\r\n\t\t\tuint32Array = new Uint32Array( buffer );\r\n\t\t\tuint16Array = new Uint16Array( buffer );\r\n\t\t\tfloat32Array = new Float32Array( buffer );\r\n\r\n\t\t\t_traverse( 0, byteOffset );\r\n\t\t\tbyteOffset += buffer.byteLength;\r\n\r\n\t\t}\r\n\r\n\t\tfunction _traverse( node32Index, byteOffset, force = false ) {\r\n\r\n\t\t\tconst node16Index = node32Index * 2;\r\n\t\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\r\n\t\t\tif ( isLeaf ) {\r\n\r\n\t\t\t\tconst offset = uint32Array[ node32Index + 6 ];\r\n\t\t\t\tconst count = uint16Array[ node16Index + 14 ];\r\n\r\n\t\t\t\tlet minx = Infinity;\r\n\t\t\t\tlet miny = Infinity;\r\n\t\t\t\tlet minz = Infinity;\r\n\t\t\t\tlet maxx = - Infinity;\r\n\t\t\t\tlet maxy = - Infinity;\r\n\t\t\t\tlet maxz = - Infinity;\r\n\t\t\t\tfor ( let i = 3 * offset, l = 3 * ( offset + count ); i < l; i ++ ) {\r\n\r\n\t\t\t\t\tconst index3 = indexArr[ i ] * 3;\r\n\t\t\t\t\tconst x = posArr[ index3 + 0 ];\r\n\t\t\t\t\tconst y = posArr[ index3 + 1 ];\r\n\t\t\t\t\tconst z = posArr[ index3 + 2 ];\r\n\r\n\t\t\t\t\tif ( x < minx ) minx = x;\r\n\t\t\t\t\tif ( x > maxx ) maxx = x;\r\n\r\n\t\t\t\t\tif ( y < miny ) miny = y;\r\n\t\t\t\t\tif ( y > maxy ) maxy = y;\r\n\r\n\t\t\t\t\tif ( z < minz ) minz = z;\r\n\t\t\t\t\tif ( z > maxz ) maxz = z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\tfloat32Array[ node32Index + 0 ] !== minx ||\r\n\t\t\t\t\tfloat32Array[ node32Index + 1 ] !== miny ||\r\n\t\t\t\t\tfloat32Array[ node32Index + 2 ] !== minz ||\r\n\r\n\t\t\t\t\tfloat32Array[ node32Index + 3 ] !== maxx ||\r\n\t\t\t\t\tfloat32Array[ node32Index + 4 ] !== maxy ||\r\n\t\t\t\t\tfloat32Array[ node32Index + 5 ] !== maxz\r\n\t\t\t\t) {\r\n\r\n\t\t\t\t\tfloat32Array[ node32Index + 0 ] = minx;\r\n\t\t\t\t\tfloat32Array[ node32Index + 1 ] = miny;\r\n\t\t\t\t\tfloat32Array[ node32Index + 2 ] = minz;\r\n\r\n\t\t\t\t\tfloat32Array[ node32Index + 3 ] = maxx;\r\n\t\t\t\t\tfloat32Array[ node32Index + 4 ] = maxy;\r\n\t\t\t\t\tfloat32Array[ node32Index + 5 ] = maxz;\r\n\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst left = node32Index + 8;\r\n\t\t\t\tconst right = uint32Array[ node32Index + 6 ];\r\n\r\n\t\t\t\t// the indentifying node indices provided by the shapecast function include offsets of all\r\n\t\t\t\t// root buffers to guarantee they're unique between roots so offset left and right indices here.\r\n\t\t\t\tconst offsetLeft = left + byteOffset;\r\n\t\t\t\tconst offsetRight = right + byteOffset;\r\n\r\n\t\t\t\tlet leftChange = false;\r\n\t\t\t\tlet forceLeft = force || terminationIndices && terminationIndices.has( offsetLeft );\r\n\t\t\t\tlet traverseLeft = forceLeft || ( nodeIndices ? nodeIndices.has( offsetLeft ) : true );\r\n\t\t\t\tif ( traverseLeft ) {\r\n\r\n\t\t\t\t\tleftChange = _traverse( left, byteOffset, forceLeft );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet rightChange = false;\r\n\t\t\t\tlet forceRight = force || terminationIndices && terminationIndices.has( offsetRight );\r\n\t\t\t\tlet traverseRight = forceRight || ( nodeIndices ? nodeIndices.has( offsetRight ) : true );\r\n\t\t\t\tif ( traverseRight ) {\r\n\r\n\t\t\t\t\trightChange = _traverse( right, byteOffset, forceRight );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst didChange = leftChange || rightChange;\r\n\r\n\t\t\t\tif ( didChange ) {\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst lefti = left + i;\r\n\t\t\t\t\t\tconst righti = right + i;\r\n\t\t\t\t\t\tconst minLeftValue = float32Array[ lefti ];\r\n\t\t\t\t\t\tconst maxLeftValue = float32Array[ lefti + 3 ];\r\n\t\t\t\t\t\tconst minRightValue = float32Array[ righti ];\r\n\t\t\t\t\t\tconst maxRightValue = float32Array[ righti + 3 ];\r\n\r\n\t\t\t\t\t\tfloat32Array[ node32Index + i ] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\r\n\t\t\t\t\t\tfloat32Array[ node32Index + i + 3 ] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn didChange;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttraverse( callback, rootIndex = 0 ) {\r\n\r\n\t\tconst buffer = this._roots[ rootIndex ];\r\n\t\tconst uint32Array = new Uint32Array( buffer );\r\n\t\tconst uint16Array = new Uint16Array( buffer );\r\n\t\t_traverse( 0 );\r\n\r\n\t\tfunction _traverse( node32Index, depth = 0 ) {\r\n\r\n\t\t\tconst node16Index = node32Index * 2;\r\n\t\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\r\n\t\t\tif ( isLeaf ) {\r\n\r\n\t\t\t\tconst offset = uint32Array[ node32Index + 6 ];\r\n\t\t\t\tconst count = uint16Array[ node16Index + 14 ];\r\n\t\t\t\tcallback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), offset, count );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst left = node32Index + BYTES_PER_NODE / 4;\r\n\t\t\t\tconst right = uint32Array[ node32Index + 6 ];\r\n\t\t\t\tconst splitAxis = uint32Array[ node32Index + 7 ];\r\n\t\t\t\tconst stopTraversal = callback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), splitAxis );\r\n\r\n\t\t\t\tif ( ! stopTraversal ) {\r\n\r\n\t\t\t\t\t_traverse( left, depth + 1 );\r\n\t\t\t\t\t_traverse( right, depth + 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/* Core Cast Functions */\r\n\traycast( mesh, raycaster, ray, intersects ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tsetBuffer( root );\r\n\t\t\traycast( 0, mesh, geometry, raycaster, ray, intersects );\r\n\t\t\tclearBuffer();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\traycastFirst( mesh, raycaster, ray ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tlet closestResult = null;\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tsetBuffer( root );\r\n\t\t\tconst result = raycastFirst( 0, mesh, geometry, raycaster, ray );\r\n\t\t\tclearBuffer();\r\n\r\n\t\t\tif ( result != null && ( closestResult == null || result.distance < closestResult.distance ) ) {\r\n\r\n\t\t\t\tclosestResult = result;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\treturn closestResult;\r\n\r\n\t}\r\n\r\n\tintersectsGeometry( mesh, otherGeometry, geomToMesh ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tlet result = false;\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tsetBuffer( root );\r\n\t\t\tresult = intersectsGeometry( 0, mesh, geometry, otherGeometry, geomToMesh );\r\n\t\t\tclearBuffer();\r\n\r\n\t\t\tif ( result ) {\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tshapecast( mesh, callbacks, _intersectsTriangleFunc, _orderNodesFunc ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tif ( callbacks instanceof Function ) {\r\n\r\n\t\t\tif ( _intersectsTriangleFunc ) {\r\n\r\n\t\t\t\t// Support the previous function signature that provided three sequential index buffer\r\n\t\t\t\t// indices here.\r\n\t\t\t\tconst originalTriangleFunc = _intersectsTriangleFunc;\r\n\t\t\t\t_intersectsTriangleFunc = ( tri, index, contained, depth ) => {\r\n\r\n\t\t\t\t\tconst i3 = index * 3;\r\n\t\t\t\t\treturn originalTriangleFunc( tri, i3, i3 + 1, i3 + 2, contained, depth );\r\n\r\n\t\t\t\t};\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcallbacks = {\r\n\r\n\t\t\t\tboundsTraverseOrder: _orderNodesFunc,\r\n\t\t\t\tintersectsBounds: callbacks,\r\n\t\t\t\tintersectsTriangle: _intersectsTriangleFunc,\r\n\t\t\t\tintersectsRange: null,\r\n\r\n\t\t\t};\r\n\r\n\t\t\tconsole.warn( 'MeshBVH: Shapecast function signature has changed and now takes an object of callbacks as a second argument. See docs for new signature.' );\r\n\r\n\t\t}\r\n\r\n\t\tlet {\r\n\t\t\tboundsTraverseOrder,\r\n\t\t\tintersectsBounds,\r\n\t\t\tintersectsRange,\r\n\t\t\tintersectsTriangle,\r\n\t\t} = callbacks;\r\n\r\n\t\tif ( intersectsRange && intersectsTriangle ) {\r\n\r\n\t\t\tconst originalIntersectsRange = intersectsRange;\r\n\t\t\tintersectsRange = ( offset, count, contained, depth, nodeIndex ) => {\r\n\r\n\t\t\t\tif ( ! originalIntersectsRange( offset, count, contained, depth, nodeIndex ) ) {\r\n\r\n\t\t\t\t\treturn iterateOverTriangles( offset, count, geometry, intersectsTriangle, contained, depth, triangle );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t};\r\n\r\n\t\t} else if ( ! intersectsRange ) {\r\n\r\n\t\t\tif ( intersectsTriangle ) {\r\n\r\n\t\t\t\tintersectsRange = ( offset, count, contained, depth ) => {\r\n\r\n\t\t\t\t\treturn iterateOverTriangles( offset, count, geometry, intersectsTriangle, contained, depth, triangle );\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tintersectsRange = ( offset, count, contained ) => {\r\n\r\n\t\t\t\t\treturn contained;\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlet result = false;\r\n\t\tlet byteOffset = 0;\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tsetBuffer( root );\r\n\t\t\tresult = shapecast( 0, mesh, geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset );\r\n\t\t\tclearBuffer();\r\n\r\n\t\t\tif ( result ) {\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbyteOffset += root.byteLength;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t/* Derived Cast Functions */\r\n\tintersectsBox( mesh, box, boxToMesh ) {\r\n\r\n\t\tobb.set( box.min, box.max, boxToMesh );\r\n\t\tobb.update();\r\n\r\n\t\treturn this.shapecast(\r\n\t\t\tmesh,\r\n\t\t\t{\r\n\t\t\t\tintersectsBounds: box => obb.intersectsBox( box ),\r\n\t\t\t\tintersectsTriangle: tri => obb.intersectsTriangle( tri )\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tintersectsSphere( mesh, sphere ) {\r\n\r\n\t\treturn this.shapecast(\r\n\t\t\tmesh,\r\n\t\t\t{\r\n\t\t\t\tintersectsBounds: box => sphere.intersectsBox( box ),\r\n\t\t\t\tintersectsTriangle: tri => tri.intersectsSphere( sphere )\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tclosestPointToGeometry( mesh, otherGeometry, geometryToBvh, target1 = null, target2 = null, minThreshold = 0, maxThreshold = Infinity ) {\r\n\r\n\t\tif ( ! otherGeometry.boundingBox ) {\r\n\r\n\t\t\totherGeometry.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\r\n\t\tobb.update();\r\n\r\n\t\tconst pos = otherGeometry.attributes.position;\r\n\t\tconst index = otherGeometry.index;\r\n\r\n\t\tlet tempTarget1 = null;\r\n\t\tlet tempTarget2 = null;\r\n\t\tif ( target1 ) {\r\n\r\n\t\t\ttempTarget1 = temp1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( target2 ) {\r\n\r\n\t\t\ttempTarget2 = temp2;\r\n\r\n\t\t}\r\n\r\n\t\tlet closestDistance = Infinity;\r\n\t\tthis.shapecast(\r\n\t\t\tmesh,\r\n\t\t\t{\r\n\r\n\t\t\t\tboundsTraverseOrder: box => {\r\n\r\n\t\t\t\t\treturn obb.distanceToBox( box, Math.min( closestDistance, maxThreshold ) );\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\r\n\r\n\t\t\t\t\treturn score < closestDistance && score < maxThreshold;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tintersectsTriangle: tri => {\r\n\r\n\t\t\t\t\tif ( tri.needsUpdate ) {\r\n\r\n\t\t\t\t\t\ttri.update();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst sphere1 = tri.sphere;\r\n\t\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\r\n\r\n\t\t\t\t\t\tsetTriangle( tri2, i2, index, pos );\r\n\t\t\t\t\t\ttri2.a.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\t\ttri2.b.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\t\ttri2.c.applyMatrix4( geometryToBvh );\r\n\t\t\t\t\t\ttri2.sphere.setFromPoints( tri2.points );\r\n\r\n\t\t\t\t\t\tconst sphere2 = tri2.sphere;\r\n\t\t\t\t\t\tconst sphereDist = sphere2.center.distanceTo( sphere1.center ) - sphere2.radius - sphere1.radius;\r\n\t\t\t\t\t\tif ( sphereDist > closestDistance ) {\r\n\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttri2.update();\r\n\r\n\t\t\t\t\t\tconst dist = tri.distanceToTriangle( tri2, tempTarget1, tempTarget2 );\r\n\t\t\t\t\t\tif ( dist < closestDistance ) {\r\n\r\n\t\t\t\t\t\t\tif ( target1 ) {\r\n\r\n\t\t\t\t\t\t\t\ttarget1.copy( tempTarget1 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( target2 ) {\r\n\r\n\t\t\t\t\t\t\t\ttarget2.copy( tempTarget2 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tclosestDistance = dist;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\r\n\t\t\t\t\t\tif ( dist < minThreshold ) {\r\n\r\n\t\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t);\r\n\r\n\t\treturn closestDistance;\r\n\r\n\t}\r\n\r\n\tdistanceToGeometry( mesh, geom, matrix, minThreshold, maxThreshold ) {\r\n\r\n\t\treturn this.closestPointToGeometry( mesh, geom, matrix, null, null, minThreshold, maxThreshold );\r\n\r\n\t}\r\n\r\n\tclosestPointToPoint( mesh, point, target, minThreshold = 0, maxThreshold = Infinity ) {\r\n\r\n\t\t// early out if under minThreshold\r\n\t\t// skip checking if over maxThreshold\r\n\t\t// set minThreshold = maxThreshold to quickly check if a point is within a threshold\r\n\t\t// returns Infinity if no value found\r\n\t\tconst minThresholdSq = minThreshold * minThreshold;\r\n\t\tconst maxThresholdSq = maxThreshold * maxThreshold;\r\n\t\tlet closestDistanceSq = Infinity;\r\n\t\tthis.shapecast(\r\n\r\n\t\t\tmesh,\r\n\t\t\t{\r\n\r\n\t\t\t\tboundsTraverseOrder: box => {\r\n\r\n\t\t\t\t\ttemp.copy( point ).clamp( box.min, box.max );\r\n\t\t\t\t\treturn temp.distanceToSquared( point );\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\r\n\r\n\t\t\t\t\treturn score < closestDistanceSq && score < maxThresholdSq;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tintersectsTriangle: tri => {\r\n\r\n\t\t\t\t\ttri.closestPointToPoint( point, temp );\r\n\t\t\t\t\tconst distSq = point.distanceToSquared( temp );\r\n\t\t\t\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\t\t\t\tif ( target ) {\r\n\r\n\t\t\t\t\t\t\ttarget.copy( temp );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tclosestDistanceSq = distSq;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( distSq < minThresholdSq ) {\r\n\r\n\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t}\r\n\r\n\t\t);\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( mesh, point, minThreshold, maxThreshold ) {\r\n\r\n\t\treturn this.closestPointToPoint( mesh, point, null, minThreshold, maxThreshold );\r\n\r\n\t}\r\n\r\n\tgetBoundingBox( target ) {\r\n\r\n\t\ttarget.makeEmpty();\r\n\r\n\t\tconst roots = this._roots;\r\n\t\troots.forEach( buffer => {\r\n\r\n\t\t\tarrayToBox( 0, new Float32Array( buffer ), tempBox );\r\n\t\t\ttarget.union( tempBox );\r\n\r\n\t\t} );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}