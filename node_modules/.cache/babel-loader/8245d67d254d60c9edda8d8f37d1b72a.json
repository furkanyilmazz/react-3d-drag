{"ast":null,"code":"import _slicedToArray from\"/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{Suspense,useRef,useState,useEffect}from\"react\";import{Canvas,useFrame}from\"@react-three/fiber\";import{ContactShadows,Environment,useGLTF,OrbitControls}from\"@react-three/drei\";import{HexColorPicker}from\"react-colorful\";import{proxy,useSnapshot}from\"valtio\";// Using a Valtio state model to bridge reactivity between\n// the canvas and the dom, both can write to it and/or react to it.\nimport object from\"./assets/3d/kup.glb\";import\"./App.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var state=proxy({current:null,items:{body:\"#ffffff\",body2:\"#ffffff\"}});function Kup(){var ref=useRef();var snap=useSnapshot(state);// Drei's useGLTF hook sets up draco automatically, that's how it differs from useLoader(GLTFLoader, url)\n// { nodes, materials } are extras that come from useLoader, these do not exist in threejs/GLTFLoader\n// nodes is a named collection of meshes, materials a named collection of materials\nvar _useGLTF=useGLTF(object),nodes=_useGLTF.nodes,materials=_useGLTF.materials;// Animate model\nuseFrame(function(state){var t=state.clock.getElapsedTime();ref.current.rotation.z=-0.2-(1+Math.sin(t/1.5))/20;ref.current.rotation.x=Math.cos(t/4)/8;ref.current.rotation.y=Math.sin(t/4)/8;ref.current.position.y=(1+Math.sin(t/1.5))/10;});// Cursor showing current color\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),hovered=_useState2[0],set=_useState2[1];useEffect(function(){var cursor=\"<svg width=\\\"64\\\" height=\\\"64\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g clip-path=\\\"url(#clip0)\\\"><path fill=\\\"rgba(255, 255, 255, 0.5)\\\" d=\\\"M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z\\\" stroke=\\\"#000\\\"/><g filter=\\\"url(#filter0_d)\\\"><path d=\\\"M29.5 47C39.165 47 47 39.165 47 29.5S39.165 12 29.5 12 12 19.835 12 29.5 19.835 47 29.5 47z\\\" fill=\\\"\".concat(snap.items[hovered],\"\\\"/></g><path d=\\\"M2 2l11 2.947L4.947 13 2 2z\\\" fill=\\\"#000\\\"/><text fill=\\\"#000\\\" style=\\\"white-space:pre\\\" font-family=\\\"Inter var, sans-serif\\\" font-size=\\\"10\\\" letter-spacing=\\\"-.01em\\\"><tspan x=\\\"35\\\" y=\\\"63\\\">\").concat(hovered,\"</tspan></text></g><defs><clipPath id=\\\"clip0\\\"><path fill=\\\"#fff\\\" d=\\\"M0 0h64v64H0z\\\"/></clipPath><filter id=\\\"filter0_d\\\" x=\\\"6\\\" y=\\\"8\\\" width=\\\"47\\\" height=\\\"47\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\"><feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\"/><feOffset dy=\\\"2\\\"/><feGaussianBlur stdDeviation=\\\"3\\\"/><feColorMatrix values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\\\"/><feBlend in2=\\\"BackgroundImageFix\\\" result=\\\"effect1_dropShadow\\\"/><feBlend in=\\\"SourceGraphic\\\" in2=\\\"effect1_dropShadow\\\" result=\\\"shape\\\"/></filter></defs></svg>\");var auto=\"<svg width=\\\"64\\\" height=\\\"64\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path fill=\\\"rgba(255, 255, 255, 0.5)\\\" d=\\\"M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z\\\" stroke=\\\"#000\\\"/><path d=\\\"M2 2l11 2.947L4.947 13 2 2z\\\" fill=\\\"#000\\\"/></svg>\";document.body.style.cursor=\"url('data:image/svg+xml;base64,\".concat(btoa(hovered?cursor:auto),\"'), auto\");},[hovered]);// Using the GLTFJSX output here to wire in app-state and hook up events\nreturn/*#__PURE__*/_jsxs(\"group\",{ref:ref,dispose:null,onPointerOver:function onPointerOver(e){return e.stopPropagation(),set(e.object.material.name);},onPointerOut:function onPointerOut(e){return e.intersections.length===0&&set(null);},onPointerMissed:function onPointerMissed(){return state.current=null;},onPointerDown:function onPointerDown(e){return e.stopPropagation(),state.current=e.object.material.name;},children:[/*#__PURE__*/_jsx(\"mesh\",{receiveShadow:true,castShadow:true,geometry:nodes.Cube.geometry,material:materials.Material,\"material-color\":snap.items.body}),/*#__PURE__*/_jsx(\"mesh\",{receiveShadow:true,castShadow:true,geometry:nodes.Cube001.geometry,material:materials['Material.001'],\"material-color\":snap.items.body2})]});}function Picker(){var snap=useSnapshot(state);return/*#__PURE__*/_jsxs(\"div\",{style:{display:snap.current?\"block\":\"none\"},children:[/*#__PURE__*/_jsx(HexColorPicker,{className:\"picker\",color:snap.items[snap.current],onChange:function onChange(color){return state.items[snap.current]=color;}}),/*#__PURE__*/_jsx(\"h1\",{children:snap.current})]});}export default function App(){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Canvas,{shadows:true,dpr:[1,2],camera:{position:[0,0,4],fov:50},children:[/*#__PURE__*/_jsx(\"ambientLight\",{intensity:0.7}),/*#__PURE__*/_jsx(\"spotLight\",{intensity:0.5,angle:0.1,penumbra:1,position:[10,15,10],castShadow:true}),/*#__PURE__*/_jsxs(Suspense,{fallback:null,children:[/*#__PURE__*/_jsx(Kup,{}),/*#__PURE__*/_jsx(Environment,{preset:\"city\"}),/*#__PURE__*/_jsx(ContactShadows,{\"rotation-x\":Math.PI/2,position:[0,-0.8,0],opacity:0.25,width:10,height:10,blur:1.5,far:0.8})]}),/*#__PURE__*/_jsx(OrbitControls,{minPolarAngle:Math.PI/2,maxPolarAngle:Math.PI/2,enableZoom:false,enablePan:false})]}),/*#__PURE__*/_jsx(Picker,{})]});}","map":{"version":3,"sources":["/Users/a2017/Documents/GitHub/react-3d-drag/src/App.js"],"names":["React","Suspense","useRef","useState","useEffect","Canvas","useFrame","ContactShadows","Environment","useGLTF","OrbitControls","HexColorPicker","proxy","useSnapshot","object","state","current","items","body","body2","Kup","ref","snap","nodes","materials","t","clock","getElapsedTime","rotation","z","Math","sin","x","cos","y","position","hovered","set","cursor","auto","document","style","btoa","e","stopPropagation","material","name","intersections","length","Cube","geometry","Material","Cube001","Picker","display","color","App","fov","PI"],"mappings":"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","sourcesContent":["import React, { Suspense, useRef, useState, useEffect } from \"react\"\nimport { Canvas, useFrame } from \"@react-three/fiber\"\nimport { ContactShadows, Environment, useGLTF, OrbitControls } from \"@react-three/drei\"\nimport { HexColorPicker } from \"react-colorful\"\nimport { proxy, useSnapshot } from \"valtio\"\n\n// Using a Valtio state model to bridge reactivity between\n// the canvas and the dom, both can write to it and/or react to it.\n\nimport object from \"./assets/3d/kup.glb\"\n\nimport \"./App.css\";\n\nconst state = proxy({\n  current: null,\n  items: {\n    body: \"#ffffff\",\n    body2: \"#ffffff\",\n  }\n});\n\nfunction Kup() {\n  const ref = useRef()\n  const snap = useSnapshot(state)\n  // Drei's useGLTF hook sets up draco automatically, that's how it differs from useLoader(GLTFLoader, url)\n  // { nodes, materials } are extras that come from useLoader, these do not exist in threejs/GLTFLoader\n  // nodes is a named collection of meshes, materials a named collection of materials\n  const { nodes, materials } = useGLTF(object)\n\n  // Animate model\n  useFrame((state) => {\n    const t = state.clock.getElapsedTime()\n    ref.current.rotation.z = -0.2 - (1 + Math.sin(t / 1.5)) / 20\n    ref.current.rotation.x = Math.cos(t / 4) / 8\n    ref.current.rotation.y = Math.sin(t / 4) / 8\n    ref.current.position.y = (1 + Math.sin(t / 1.5)) / 10\n  })\n\n  // Cursor showing current color\n  const [hovered, set] = useState(null)\n  useEffect(() => {\n    const cursor = `<svg width=\"64\" height=\"64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0)\"><path fill=\"rgba(255, 255, 255, 0.5)\" d=\"M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z\" stroke=\"#000\"/><g filter=\"url(#filter0_d)\"><path d=\"M29.5 47C39.165 47 47 39.165 47 29.5S39.165 12 29.5 12 12 19.835 12 29.5 19.835 47 29.5 47z\" fill=\"${snap.items[hovered]}\"/></g><path d=\"M2 2l11 2.947L4.947 13 2 2z\" fill=\"#000\"/><text fill=\"#000\" style=\"white-space:pre\" font-family=\"Inter var, sans-serif\" font-size=\"10\" letter-spacing=\"-.01em\"><tspan x=\"35\" y=\"63\">${hovered}</tspan></text></g><defs><clipPath id=\"clip0\"><path fill=\"#fff\" d=\"M0 0h64v64H0z\"/></clipPath><filter id=\"filter0_d\" x=\"6\" y=\"8\" width=\"47\" height=\"47\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\"><feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"/><feColorMatrix in=\"SourceAlpha\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"/><feOffset dy=\"2\"/><feGaussianBlur stdDeviation=\"3\"/><feColorMatrix values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\"/><feBlend in2=\"BackgroundImageFix\" result=\"effect1_dropShadow\"/><feBlend in=\"SourceGraphic\" in2=\"effect1_dropShadow\" result=\"shape\"/></filter></defs></svg>`\n    const auto = `<svg width=\"64\" height=\"64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"rgba(255, 255, 255, 0.5)\" d=\"M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z\" stroke=\"#000\"/><path d=\"M2 2l11 2.947L4.947 13 2 2z\" fill=\"#000\"/></svg>`\n    document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(hovered ? cursor : auto)}'), auto`\n  }, [hovered])\n\n  // Using the GLTFJSX output here to wire in app-state and hook up events\n  return (\n    <group\n      ref={ref}\n      dispose={null}\n      onPointerOver={(e) => (e.stopPropagation(), set(e.object.material.name))}\n      onPointerOut={(e) => e.intersections.length === 0 && set(null)}\n      onPointerMissed={() => (state.current = null)}\n      onPointerDown={(e) => (e.stopPropagation(), (state.current = e.object.material.name))}>\n      <mesh receiveShadow castShadow geometry={nodes.Cube.geometry} material={materials.Material} material-color={snap.items.body} />\n      <mesh receiveShadow castShadow geometry={nodes.Cube001.geometry} material={materials['Material.001']} material-color={snap.items.body2} />\n    </group>\n  )\n}\n\nfunction Picker() {\n  const snap = useSnapshot(state)\n  return (\n    <div style={{ display: snap.current ? \"block\" : \"none\" }}>\n      <HexColorPicker className=\"picker\" color={snap.items[snap.current]} onChange={(color) => (state.items[snap.current] = color)} />\n      <h1>{snap.current}</h1>\n    </div>\n  )\n}\n\nexport default function App() {\n  return (\n    <>\n      <Canvas shadows dpr={[1, 2]} camera={{ position: [0, 0, 4], fov: 50 }}>\n        <ambientLight intensity={0.7} />\n        <spotLight intensity={0.5} angle={0.1} penumbra={1} position={[10, 15, 10]} castShadow />\n        <Suspense fallback={null}>\n          <Kup />\n          <Environment preset=\"city\" />\n          <ContactShadows rotation-x={Math.PI / 2} position={[0, -0.8, 0]} opacity={0.25} width={10} height={10} blur={1.5} far={0.8} />\n        </Suspense>\n        <OrbitControls minPolarAngle={Math.PI / 2} maxPolarAngle={Math.PI / 2} enableZoom={false} enablePan={false} />\n      </Canvas>\n      <Picker />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}