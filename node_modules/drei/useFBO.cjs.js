'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectWithoutPropertiesLoose = require('@babel/runtime/helpers/objectWithoutPropertiesLoose');
var React = require('react');
var reactThreeFiber = require('react-three-fiber');
var THREE = require('three');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _objectWithoutPropertiesLoose__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutPropertiesLoose);

// ðŸ‘‡ uncomment when TS version supports function overloads
// export function useFBO(settings?: FBOSettings)
function useFBO(width, height, settings) {
  var _useThree = reactThreeFiber.useThree(),
      size = _useThree.size,
      gl = _useThree.gl;

  var dpr = React.useMemo(function () {
    return gl.getPixelRatio();
  }, [gl]);

  var _width = typeof width === 'number' ? width : size.width * dpr;

  var _height = typeof height === 'number' ? height : size.height * dpr;

  var _settings = (typeof width === 'number' ? settings : width) || {};

  var target = React.useMemo(function () {
    var multisample = _settings.multisample,
        samples = _settings.samples,
        targetSettings = _objectWithoutPropertiesLoose__default['default'](_settings, ["multisample", "samples"]);

    var target;

    if (multisample && gl.capabilities.isWebGL2) {
      target = new THREE.WebGLMultisampleRenderTarget(_width, _height, targetSettings);
      if (samples) target.samples = samples;
    } else {
      target = new THREE.WebGLRenderTarget(_width, _height, targetSettings);
    }

    return target; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  React.useEffect(function () {
    target.setSize(_width, _height);
  }, [target, _width, _height]);
  React.useEffect(function () {
    return function () {
      return target.dispose();
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return target;
}

exports.useFBO = useFBO;
