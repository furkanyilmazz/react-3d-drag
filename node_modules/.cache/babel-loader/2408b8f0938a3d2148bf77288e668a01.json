{"ast":null,"code":"import _slicedToArray from \"/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\nvar ContactShadows = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$opacity = _ref.opacity,\n      opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 1 : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 1 : _ref$height,\n      _ref$blur = _ref.blur,\n      blur = _ref$blur === void 0 ? 1 : _ref$blur,\n      _ref$far = _ref.far,\n      far = _ref$far === void 0 ? 10 : _ref$far,\n      _ref$resolution = _ref.resolution,\n      resolution = _ref$resolution === void 0 ? 256 : _ref$resolution,\n      props = _objectWithoutProperties(_ref, [\"opacity\", \"width\", \"height\", \"blur\", \"far\", \"resolution\"]);\n\n  var scene = useThree(function (_ref2) {\n    var scene = _ref2.scene;\n    return scene;\n  });\n  var gl = useThree(function (_ref3) {\n    var gl = _ref3.gl;\n    return gl;\n  });\n  var shadowCamera = React.useRef();\n\n  var _React$useMemo = React.useMemo(function () {\n    var renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    var renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    var planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    var blurPlane = new THREE.Mesh(planeGeometry);\n    var depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = function (shader) {\n      return shader.fragmentShader = shader.fragmentShader.replace('1.0 - fragCoordZ ), opacity );', '0.0 ), ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    var horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    var verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 7),\n      renderTarget = _React$useMemo2[0],\n      planeGeometry = _React$useMemo2[1],\n      depthMaterial = _React$useMemo2[2],\n      blurPlane = _React$useMemo2[3],\n      horizontalBlurMaterial = _React$useMemo2[4],\n      verticalBlurMaterial = _React$useMemo2[5],\n      renderTargetBlur = _React$useMemo2[6];\n\n  useFrame(function () {\n    if (shadowCamera.current) {\n      var initialBackground = scene.background;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = null;\n      blurPlane.material = horizontalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTarget.texture;\n      horizontalBlurMaterial.uniforms.h.value = blur / 256;\n      gl.setRenderTarget(renderTargetBlur);\n      gl.render(blurPlane, shadowCamera.current);\n      blurPlane.material = verticalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTargetBlur.texture;\n      verticalBlurMaterial.uniforms.v.value = blur / 256;\n      gl.setRenderTarget(renderTarget);\n      gl.render(blurPlane, shadowCamera.current);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\nexport { ContactShadows };","map":{"version":3,"sources":["/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/@react-three/drei/core/ContactShadows.js"],"names":["_extends","React","THREE","useThree","useFrame","HorizontalBlurShader","VerticalBlurShader","ContactShadows","forwardRef","ref","opacity","width","height","blur","far","resolution","props","scene","gl","shadowCamera","useRef","useMemo","renderTarget","WebGLRenderTarget","renderTargetBlur","texture","generateMipmaps","planeGeometry","PlaneBufferGeometry","rotateX","Math","PI","blurPlane","Mesh","depthMaterial","MeshDepthMaterial","depthTest","depthWrite","onBeforeCompile","shader","fragmentShader","replace","horizontalBlurMaterial","ShaderMaterial","verticalBlurMaterial","current","initialBackground","background","overrideMaterial","setRenderTarget","render","material","uniforms","tDiffuse","value","h","v","createElement","geometry","scale","rotation","map","transparent","args"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 256,\n  ...props\n}, ref) => {\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const shadowCamera = React.useRef();\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => shader.fragmentShader = shader.fragmentShader.replace('1.0 - fragCoordZ ), opacity );', '0.0 ), ( 1.0 - fragCoordZ ) * 1.0 );');\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height]);\n  useFrame(() => {\n    if (shadowCamera.current) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = null;\n      blurPlane.material = horizontalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTarget.texture;\n      horizontalBlurMaterial.uniforms.h.value = blur / 256;\n      gl.setRenderTarget(renderTargetBlur);\n      gl.render(blurPlane, shadowCamera.current);\n      blurPlane.material = verticalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTargetBlur.texture;\n      verticalBlurMaterial.uniforms.v.value = blur / 256;\n      gl.setRenderTarget(renderTarget);\n      gl.render(blurPlane, shadowCamera.current);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n"]},"metadata":{},"sourceType":"module"}