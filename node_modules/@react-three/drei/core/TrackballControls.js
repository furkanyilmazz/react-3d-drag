import _extends from '@babel/runtime/helpers/esm/extends';
import * as React from 'react';
import { useThree, useFrame } from '@react-three/fiber';
import { TrackballControls as TrackballControls$1 } from 'three-stdlib';

const TrackballControls = /*#__PURE__*/React.forwardRef(({
  camera,
  regress,
  ...restProps
}, ref) => {
  const invalidate = useThree(({
    invalidate
  }) => invalidate);
  const defaultCamera = useThree(({
    camera
  }) => camera);
  const gl = useThree(({
    gl
  }) => gl);
  const performance = useThree(({
    performance
  }) => performance);
  const explCamera = camera || defaultCamera;
  const controls = React.useMemo(() => new TrackballControls$1(explCamera, gl.domElement), [explCamera, gl.domElement]);
  useFrame(() => {
    if (controls.enabled) controls.update();
  });
  React.useEffect(() => {
    const callback = () => {
      invalidate();
      if (regress) performance.regress();
    };

    controls.addEventListener('change', callback);
    return () => {
      controls.removeEventListener('change', callback);
      controls.dispose();
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [regress, controls, invalidate]);
  return /*#__PURE__*/React.createElement("primitive", _extends({
    ref: ref,
    object: controls
  }, restProps));
});

export { TrackballControls };
