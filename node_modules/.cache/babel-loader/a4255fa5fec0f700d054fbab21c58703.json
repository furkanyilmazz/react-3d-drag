{"ast":null,"code":"import { GLTFLoader, DRACOLoader, MeshoptDecoder } from 'three-stdlib';\nimport { useLoader } from '@react-three/fiber'; // @ts-ignore\n\nfunction extensions(useDraco, useMeshopt, extendLoader) {\n  return function (loader) {\n    if (extendLoader) {\n      extendLoader(loader);\n    }\n\n    if (useDraco) {\n      var dracoLoader = new DRACOLoader();\n      dracoLoader.setDecoderPath(typeof useDraco === 'string' ? useDraco : 'https://www.gstatic.com/draco/v1/decoders/');\n      loader.setDRACOLoader(dracoLoader);\n    }\n\n    if (useMeshopt) {\n      loader.setMeshoptDecoder(MeshoptDecoder);\n    }\n  };\n}\n\nfunction useGLTF(path) {\n  var useDraco = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var useMeshOpt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var extendLoader = arguments.length > 3 ? arguments[3] : undefined;\n  var gltf = useLoader(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));\n  return gltf;\n}\n\nuseGLTF.preload = function (path) {\n  var useDraco = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var useMeshOpt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var extendLoader = arguments.length > 3 ? arguments[3] : undefined;\n  return useLoader.preload(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));\n};\n\nexport { useGLTF };","map":{"version":3,"sources":["/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/@react-three/drei/core/useGLTF.js"],"names":["GLTFLoader","DRACOLoader","MeshoptDecoder","useLoader","extensions","useDraco","useMeshopt","extendLoader","loader","dracoLoader","setDecoderPath","setDRACOLoader","setMeshoptDecoder","useGLTF","path","useMeshOpt","gltf","preload"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,WAArB,EAAkCC,cAAlC,QAAwD,cAAxD;AACA,SAASC,SAAT,QAA0B,oBAA1B,C,CAEA;;AAEA,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,UAA9B,EAA0CC,YAA1C,EAAwD;AACtD,SAAO,UAAAC,MAAM,EAAI;AACf,QAAID,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAACC,MAAD,CAAZ;AACD;;AAED,QAAIH,QAAJ,EAAc;AACZ,UAAMI,WAAW,GAAG,IAAIR,WAAJ,EAApB;AACAQ,MAAAA,WAAW,CAACC,cAAZ,CAA2B,OAAOL,QAAP,KAAoB,QAApB,GAA+BA,QAA/B,GAA0C,4CAArE;AACAG,MAAAA,MAAM,CAACG,cAAP,CAAsBF,WAAtB;AACD;;AAED,QAAIH,UAAJ,EAAgB;AACdE,MAAAA,MAAM,CAACI,iBAAP,CAAyBV,cAAzB;AACD;AACF,GAdD;AAeD;;AAED,SAASW,OAAT,CAAiBC,IAAjB,EAAyE;AAAA,MAAlDT,QAAkD,uEAAvC,IAAuC;AAAA,MAAjCU,UAAiC,uEAApB,IAAoB;AAAA,MAAdR,YAAc;AACvE,MAAMS,IAAI,GAAGb,SAAS,CAACH,UAAD,EAAac,IAAb,EAAmBV,UAAU,CAACC,QAAD,EAAWU,UAAX,EAAuBR,YAAvB,CAA7B,CAAtB;AACA,SAAOS,IAAP;AACD;;AAEDH,OAAO,CAACI,OAAR,GAAkB,UAACH,IAAD;AAAA,MAAOT,QAAP,uEAAkB,IAAlB;AAAA,MAAwBU,UAAxB,uEAAqC,IAArC;AAAA,MAA2CR,YAA3C;AAAA,SAA4DJ,SAAS,CAACc,OAAV,CAAkBjB,UAAlB,EAA8Bc,IAA9B,EAAoCV,UAAU,CAACC,QAAD,EAAWU,UAAX,EAAuBR,YAAvB,CAA9C,CAA5D;AAAA,CAAlB;;AAEA,SAASM,OAAT","sourcesContent":["import { GLTFLoader, DRACOLoader, MeshoptDecoder } from 'three-stdlib';\nimport { useLoader } from '@react-three/fiber';\n\n// @ts-ignore\n\nfunction extensions(useDraco, useMeshopt, extendLoader) {\n  return loader => {\n    if (extendLoader) {\n      extendLoader(loader);\n    }\n\n    if (useDraco) {\n      const dracoLoader = new DRACOLoader();\n      dracoLoader.setDecoderPath(typeof useDraco === 'string' ? useDraco : 'https://www.gstatic.com/draco/v1/decoders/');\n      loader.setDRACOLoader(dracoLoader);\n    }\n\n    if (useMeshopt) {\n      loader.setMeshoptDecoder(MeshoptDecoder);\n    }\n  };\n}\n\nfunction useGLTF(path, useDraco = true, useMeshOpt = true, extendLoader) {\n  const gltf = useLoader(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));\n  return gltf;\n}\n\nuseGLTF.preload = (path, useDraco = true, useMeshOpt = true, extendLoader) => useLoader.preload(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));\n\nexport { useGLTF };\n"]},"metadata":{},"sourceType":"module"}