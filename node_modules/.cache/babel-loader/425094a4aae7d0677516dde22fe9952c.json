{"ast":null,"code":"import _classCallCheck from \"/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Triangle, Vector3, Line3, Sphere } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\nexport var SeparatingAxisTriangle = /*#__PURE__*/function (_Triangle) {\n  _inherits(SeparatingAxisTriangle, _Triangle);\n\n  var _super = _createSuper(SeparatingAxisTriangle);\n\n  function SeparatingAxisTriangle() {\n    var _this;\n\n    _classCallCheck(this, SeparatingAxisTriangle);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.isSeparatingAxisTriangle = true;\n    _this.satAxes = new Array(4).fill().map(function () {\n      return new Vector3();\n    });\n    _this.satBounds = new Array(4).fill().map(function () {\n      return new SeparatingAxisBounds();\n    });\n    _this.points = [_this.a, _this.b, _this.c];\n    _this.sphere = new Sphere();\n    _this.needsUpdate = false;\n    return _this;\n  }\n\n  _createClass(SeparatingAxisTriangle, [{\n    key: \"intersectsSphere\",\n    value: function intersectsSphere(sphere) {\n      return sphereIntersectTriangle(sphere, this);\n    }\n  }]);\n\n  return SeparatingAxisTriangle;\n}(Triangle);\n\nSeparatingAxisTriangle.prototype.update = function () {\n  var arr = new Array(3);\n  return function update() {\n    var a = this.a;\n    var b = this.b;\n    var c = this.c;\n    arr[0] = this.a;\n    arr[1] = this.b;\n    arr[2] = this.c;\n    var satAxes = this.satAxes;\n    var satBounds = this.satBounds;\n    var axis0 = satAxes[0];\n    var sab0 = satBounds[0];\n    this.getNormal(axis0);\n    sab0.setFromPoints(axis0, arr);\n    var axis1 = satAxes[1];\n    var sab1 = satBounds[1];\n    axis1.subVectors(a, b);\n    sab1.setFromPoints(axis1, arr);\n    var axis2 = satAxes[2];\n    var sab2 = satBounds[2];\n    axis2.subVectors(b, c);\n    sab2.setFromPoints(axis2, arr);\n    var axis3 = satAxes[3];\n    var sab3 = satBounds[3];\n    axis3.subVectors(c, a);\n    sab3.setFromPoints(axis3, arr);\n    this.sphere.setFromPoints(this.points);\n    this.needsUpdate = false;\n  };\n}();\n\nSeparatingAxisTriangle.prototype.closestPointToSegment = function () {\n  var point1 = new Vector3();\n  var point2 = new Vector3();\n  var edge = new Line3();\n  return function distanceToSegment(segment) {\n    var target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    var start = segment.start,\n        end = segment.end;\n    var points = this.points;\n    var distSq;\n    var closestDistanceSq = Infinity; // check the triangle edges\n\n    for (var i = 0; i < 3; i++) {\n      var nexti = (i + 1) % 3;\n      edge.start.copy(points[i]);\n      edge.end.copy(points[nexti]);\n      closestPointsSegmentToSegment(edge, segment, point1, point2);\n      distSq = point1.distanceToSquared(point2);\n\n      if (distSq < closestDistanceSq) {\n        closestDistanceSq = distSq;\n        if (target1) target1.copy(point1);\n        if (target2) target2.copy(point2);\n      }\n    } // check end points\n\n\n    this.closestPointToPoint(start, point1);\n    distSq = start.distanceToSquared(point1);\n\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(start);\n    }\n\n    this.closestPointToPoint(end, point1);\n    distSq = end.distanceToSquared(point1);\n\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(end);\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();\n\nSeparatingAxisTriangle.prototype.intersectsTriangle = function () {\n  var saTri2 = new SeparatingAxisTriangle();\n  var arr1 = new Array(3);\n  var arr2 = new Array(3);\n  var cachedSatBounds = new SeparatingAxisBounds();\n  var cachedSatBounds2 = new SeparatingAxisBounds();\n  var cachedAxis = new Vector3();\n  return function intersectsTriangle(other) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    if (!other.isSeparatingAxisTriangle) {\n      saTri2.copy(other);\n      saTri2.update();\n      other = saTri2;\n    }\n\n    var satBounds1 = this.satBounds;\n    var satAxes1 = this.satAxes;\n    arr2[0] = other.a;\n    arr2[1] = other.b;\n    arr2[2] = other.c;\n\n    for (var i = 0; i < 4; i++) {\n      var sb = satBounds1[i];\n      var sa = satAxes1[i];\n      cachedSatBounds.setFromPoints(sa, arr2);\n      if (sb.isSeparated(cachedSatBounds)) return false;\n    }\n\n    var satBounds2 = other.satBounds;\n    var satAxes2 = other.satAxes;\n    arr1[0] = this.a;\n    arr1[1] = this.b;\n    arr1[2] = this.c;\n\n    for (var _i = 0; _i < 4; _i++) {\n      var _sb = satBounds2[_i];\n      var _sa = satAxes2[_i];\n      cachedSatBounds.setFromPoints(_sa, arr1);\n      if (_sb.isSeparated(cachedSatBounds)) return false;\n    } // check crossed axes\n\n\n    for (var _i2 = 0; _i2 < 4; _i2++) {\n      var sa1 = satAxes1[_i2];\n\n      for (var i2 = 0; i2 < 4; i2++) {\n        var sa2 = satAxes2[i2];\n        cachedAxis.crossVectors(sa1, sa2);\n        cachedSatBounds.setFromPoints(cachedAxis, arr1);\n        cachedSatBounds2.setFromPoints(cachedAxis, arr2);\n        if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n      }\n    }\n\n    return true;\n  };\n}();\n\nSeparatingAxisTriangle.prototype.distanceToPoint = function () {\n  var target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\n\nSeparatingAxisTriangle.prototype.distanceToTriangle = function () {\n  var point = new Vector3();\n  var point2 = new Vector3();\n  var cornerFields = ['a', 'b', 'c'];\n  var line1 = new Line3();\n  var line2 = new Line3();\n  return function distanceToTriangle(other) {\n    var target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    if (other.needsUpdate) {\n      other.update();\n    }\n\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    if (this.intersectsTriangle(other)) {\n      // TODO: This will not result in a point that lies on\n      // the intersection line of the triangles\n      if (target1 || target2) {\n        this.getMidpoint(point);\n        other.closestPointToPoint(point, point2);\n        this.closestPointToPoint(point2, point);\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(point2);\n      }\n\n      return 0;\n    }\n\n    var closestDistanceSq = Infinity; // check all point distances\n\n    for (var i = 0; i < 3; i++) {\n      var dist = void 0;\n      var field = cornerFields[i];\n      var otherVec = other[field];\n      this.closestPointToPoint(otherVec, point);\n      dist = otherVec.distanceToSquared(point);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(otherVec);\n      }\n\n      var thisVec = this[field];\n      other.closestPointToPoint(thisVec, point);\n      dist = thisVec.distanceToSquared(point);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(thisVec);\n        if (target2) target2.copy(point);\n      }\n    }\n\n    for (var _i3 = 0; _i3 < 3; _i3++) {\n      var f11 = cornerFields[_i3];\n      var f12 = cornerFields[(_i3 + 1) % 3];\n      line1.set(this[f11], this[f12]);\n\n      for (var i2 = 0; i2 < 3; i2++) {\n        var f21 = cornerFields[i2];\n        var f22 = cornerFields[(i2 + 1) % 3];\n        line2.set(other[f21], other[f22]);\n        closestPointsSegmentToSegment(line1, line2, point, point2);\n\n        var _dist = point.distanceToSquared(point2);\n\n        if (_dist < closestDistanceSq) {\n          closestDistanceSq = _dist;\n          if (target1) target1.copy(point);\n          if (target2) target2.copy(point2);\n        }\n      }\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();","map":{"version":3,"sources":["/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/three-mesh-bvh/src/Utils/SeparatingAxisTriangle.js"],"names":["Triangle","Vector3","Line3","Sphere","SeparatingAxisBounds","closestPointsSegmentToSegment","sphereIntersectTriangle","SeparatingAxisTriangle","args","isSeparatingAxisTriangle","satAxes","Array","fill","map","satBounds","points","a","b","c","sphere","needsUpdate","prototype","update","arr","axis0","sab0","getNormal","setFromPoints","axis1","sab1","subVectors","axis2","sab2","axis3","sab3","closestPointToSegment","point1","point2","edge","distanceToSegment","segment","target1","target2","start","end","distSq","closestDistanceSq","Infinity","i","nexti","copy","distanceToSquared","closestPointToPoint","Math","sqrt","intersectsTriangle","saTri2","arr1","arr2","cachedSatBounds","cachedSatBounds2","cachedAxis","other","satBounds1","satAxes1","sb","sa","isSeparated","satBounds2","satAxes2","sa1","i2","sa2","crossVectors","distanceToPoint","target","point","distanceTo","distanceToTriangle","cornerFields","line1","line2","getMidpoint","dist","field","otherVec","thisVec","f11","f12","set","f21","f22"],"mappings":"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","sourcesContent":["import { Triangle, Vector3, Line3, Sphere } from 'three';\r\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\r\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\r\n\r\nexport class SeparatingAxisTriangle extends Triangle {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.isSeparatingAxisTriangle = true;\r\n\t\tthis.satAxes = new Array( 4 ).fill().map( () => new Vector3() );\r\n\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.points = [ this.a, this.b, this.c ];\r\n\t\tthis.sphere = new Sphere();\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\treturn sphereIntersectTriangle( sphere, this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nSeparatingAxisTriangle.prototype.update = ( function () {\r\n\r\n\tconst arr = new Array( 3 );\r\n\treturn function update() {\r\n\r\n\t\tconst a = this.a;\r\n\t\tconst b = this.b;\r\n\t\tconst c = this.c;\r\n\r\n\t\tarr[ 0 ] = this.a;\r\n\t\tarr[ 1 ] = this.b;\r\n\t\tarr[ 2 ] = this.c;\r\n\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst satBounds = this.satBounds;\r\n\r\n\t\tconst axis0 = satAxes[ 0 ];\r\n\t\tconst sab0 = satBounds[ 0 ];\r\n\t\tthis.getNormal( axis0 );\r\n\t\tsab0.setFromPoints( axis0, arr );\r\n\r\n\t\tconst axis1 = satAxes[ 1 ];\r\n\t\tconst sab1 = satBounds[ 1 ];\r\n\t\taxis1.subVectors( a, b );\r\n\t\tsab1.setFromPoints( axis1, arr );\r\n\r\n\t\tconst axis2 = satAxes[ 2 ];\r\n\t\tconst sab2 = satBounds[ 2 ];\r\n\t\taxis2.subVectors( b, c );\r\n\t\tsab2.setFromPoints( axis2, arr );\r\n\r\n\t\tconst axis3 = satAxes[ 3 ];\r\n\t\tconst sab3 = satBounds[ 3 ];\r\n\t\taxis3.subVectors( c, a );\r\n\t\tsab3.setFromPoints( axis3, arr );\r\n\r\n\t\tthis.sphere.setFromPoints( this.points );\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nSeparatingAxisTriangle.prototype.closestPointToSegment = ( function () {\r\n\r\n\tconst point1 = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst edge = new Line3();\r\n\r\n\treturn function distanceToSegment( segment, target1 = null, target2 = null ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tconst { start, end } = segment;\r\n\t\tconst points = this.points;\r\n\t\tlet distSq;\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check the triangle edges\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst nexti = ( i + 1 ) % 3;\r\n\t\t\tedge.start.copy( points[ i ] );\r\n\t\t\tedge.end.copy( points[ nexti ] );\r\n\r\n\t\t\tclosestPointsSegmentToSegment( edge, segment, point1, point2 );\r\n\r\n\t\t\tdistSq = point1.distanceToSquared( point2 );\r\n\t\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = distSq;\r\n\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// check end points\r\n\t\tthis.closestPointToPoint( start, point1 );\r\n\t\tdistSq = start.distanceToSquared( point1 );\r\n\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\tclosestDistanceSq = distSq;\r\n\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\tif ( target2 ) target2.copy( start );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closestPointToPoint( end, point1 );\r\n\t\tdistSq = end.distanceToSquared( point1 );\r\n\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\tclosestDistanceSq = distSq;\r\n\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\tif ( target2 ) target2.copy( end );\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nSeparatingAxisTriangle.prototype.intersectsTriangle = ( function () {\r\n\r\n\tconst saTri2 = new SeparatingAxisTriangle();\r\n\tconst arr1 = new Array( 3 );\r\n\tconst arr2 = new Array( 3 );\r\n\tconst cachedSatBounds = new SeparatingAxisBounds();\r\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\r\n\tconst cachedAxis = new Vector3();\r\n\treturn function intersectsTriangle( other ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! other.isSeparatingAxisTriangle ) {\r\n\r\n\t\t\tsaTri2.copy( other );\r\n\t\t\tsaTri2.update();\r\n\t\t\tother = saTri2;\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds1 = this.satBounds;\r\n\t\tconst satAxes1 = this.satAxes;\r\n\t\tarr2[ 0 ] = other.a;\r\n\t\tarr2[ 1 ] = other.b;\r\n\t\tarr2[ 2 ] = other.c;\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds1[ i ];\r\n\t\t\tconst sa = satAxes1[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\tconst satBounds2 = other.satBounds;\r\n\t\tconst satAxes2 = other.satAxes;\r\n\t\tarr1[ 0 ] = this.a;\r\n\t\tarr1[ 1 ] = this.b;\r\n\t\tarr1[ 2 ] = this.c;\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds2[ i ];\r\n\t\t\tconst sa = satAxes2[ i ];\r\n\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\r\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check crossed axes\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst sa1 = satAxes1[ i ];\r\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\r\n\r\n\t\t\t\tconst sa2 = satAxes2[ i2 ];\r\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\r\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\r\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\r\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nSeparatingAxisTriangle.prototype.distanceToPoint = ( function () {\r\n\r\n\tconst target = new Vector3();\r\n\treturn function distanceToPoint( point ) {\r\n\r\n\t\tthis.closestPointToPoint( point, target );\r\n\t\treturn point.distanceTo( target );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nSeparatingAxisTriangle.prototype.distanceToTriangle = ( function () {\r\n\r\n\tconst point = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst cornerFields = [ 'a', 'b', 'c' ];\r\n\tconst line1 = new Line3();\r\n\tconst line2 = new Line3();\r\n\r\n\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\r\n\r\n\t\tif ( other.needsUpdate ) {\r\n\r\n\t\t\tother.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.intersectsTriangle( other ) ) {\r\n\r\n\t\t\t// TODO: This will not result in a point that lies on\r\n\t\t\t// the intersection line of the triangles\r\n\t\t\tif ( target1 || target2 ) {\r\n\r\n\t\t\t\tthis.getMidpoint( point );\r\n\t\t\t\tother.closestPointToPoint( point, point2 );\r\n\t\t\t\tthis.closestPointToPoint( point2, point );\r\n\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check all point distances\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tlet dist;\r\n\t\t\tconst field = cornerFields[ i ];\r\n\t\t\tconst otherVec = other[ field ];\r\n\t\t\tthis.closestPointToPoint( otherVec, point );\r\n\r\n\t\t\tdist = otherVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( otherVec );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tconst thisVec = this[ field ];\r\n\t\t\tother.closestPointToPoint( thisVec, point );\r\n\r\n\t\t\tdist = thisVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( thisVec );\r\n\t\t\t\tif ( target2 ) target2.copy( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst f11 = cornerFields[ i ];\r\n\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\r\n\t\t\tline1.set( this[ f11 ], this[ f12 ] );\r\n\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\r\n\r\n\t\t\t\tconst f21 = cornerFields[ i2 ];\r\n\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\r\n\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\r\n\r\n\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\r\n\r\n\t\t\t\tconst dist = point.distanceToSquared( point2 );\r\n\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n"]},"metadata":{},"sourceType":"module"}