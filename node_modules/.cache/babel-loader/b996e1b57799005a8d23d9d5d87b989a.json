{"ast":null,"code":"import * as React from 'react';\nimport { useThree, useFrame, createPortal } from '@react-three/fiber';\nimport { Object3D, Matrix4, Quaternion, Vector3, Scene } from 'three';\nimport { OrthographicCamera } from './OrthographicCamera.js';\nimport { useCamera } from './useCamera.js';\nconst Context = /*#__PURE__*/React.createContext({});\n\nconst useGizmoContext = () => {\n  return React.useContext(Context);\n};\n\nconst turnRate = 2 * Math.PI; // turn rate in angles per second\n\nconst dummy = new Object3D();\nconst matrix = new Matrix4();\nconst [q1, q2] = [new Quaternion(), new Quaternion()];\nconst target = new Vector3();\nconst targetPosition = new Vector3();\nconst targetQuaternion = new Quaternion();\n\nconst GizmoHelper = ({\n  alignment = 'bottom-right',\n  margin = [80, 80],\n  onUpdate,\n  onTarget,\n  children: GizmoHelperComponent\n}) => {\n  const size = useThree(({\n    size\n  }) => size);\n  const mainCamera = useThree(({\n    camera\n  }) => camera);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const invalidate = useThree(({\n    invalidate\n  }) => invalidate);\n  const backgroundRef = React.useRef();\n  const gizmoRef = React.useRef();\n  const virtualCam = React.useRef(null);\n  const [virtualScene] = React.useState(() => new Scene());\n  const animating = React.useRef(false);\n  const radius = React.useRef(0);\n  const focusPoint = React.useRef(new Vector3(0, 0, 0));\n\n  const tweenCamera = direction => {\n    console.log('...');\n    animating.current = true;\n    focusPoint.current = onTarget();\n    radius.current = mainCamera.position.distanceTo(target); // Rotate from current camera orientation\n\n    dummy.position.copy(target);\n    dummy.lookAt(mainCamera.position);\n    q1.copy(dummy.quaternion); // To new current camera orientation\n\n    targetPosition.copy(direction).multiplyScalar(radius.current).add(target);\n    dummy.lookAt(targetPosition);\n    q2.copy(dummy.quaternion);\n    invalidate();\n  };\n\n  const animateStep = delta => {\n    invalidate();\n    if (!animating.current) return;\n    const step = delta * turnRate; // animate position by doing a slerp and then scaling the position on the unit sphere\n\n    q1.rotateTowards(q2, step);\n    mainCamera.position.set(0, 0, 1).applyQuaternion(q1).multiplyScalar(radius.current).add(focusPoint.current); // animate orientation\n\n    mainCamera.quaternion.rotateTowards(targetQuaternion, step);\n    mainCamera.updateProjectionMatrix();\n    onUpdate && onUpdate();\n\n    if (q1.angleTo(q2) < 0.01) {\n      animating.current = false;\n    }\n  };\n\n  React.useEffect(() => {\n    if (scene.background) {\n      //Interchange the actual scene background with the virtual scene\n      backgroundRef.current = scene.background;\n      scene.background = null;\n      virtualScene.background = backgroundRef.current;\n    }\n\n    return () => {\n      // reset on unmount\n      if (backgroundRef.current) {\n        scene.background = backgroundRef.current;\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const beforeRender = () => {\n    var _gizmoRef$current; // Sync gizmo with main camera orientation\n\n\n    matrix.copy(mainCamera.matrix).invert();\n    (_gizmoRef$current = gizmoRef.current) == null ? void 0 : _gizmoRef$current.quaternion.setFromRotationMatrix(matrix);\n  };\n\n  useFrame((_, delta) => {\n    if (virtualCam.current && gizmoRef.current) {\n      animateStep(delta);\n      beforeRender();\n      gl.autoClear = false;\n      gl.clearDepth();\n      gl.render(virtualScene, virtualCam.current);\n    }\n  });\n  const gizmoHelperContext = {\n    tweenCamera,\n    raycast: useCamera(virtualCam)\n  }; // Position gizmo component within scene\n\n  const [marginX, marginY] = margin;\n  const x = alignment.endsWith('-left') ? -size.width / 2 + marginX : size.width / 2 - marginX;\n  const y = alignment.startsWith('top-') ? size.height / 2 - marginY : -size.height / 2 + marginY;\n  return createPortal( /*#__PURE__*/React.createElement(Context.Provider, {\n    value: gizmoHelperContext\n  }, /*#__PURE__*/React.createElement(OrthographicCamera, {\n    ref: virtualCam,\n    makeDefault: false,\n    position: [0, 0, 200]\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    ref: gizmoRef,\n    position: [x, y, 0]\n  }, GizmoHelperComponent)), virtualScene);\n};\n\nexport { GizmoHelper, useGizmoContext };","map":{"version":3,"sources":["/Users/a2017/Documents/GitHub/react-3d-drag/node_modules/@react-three/drei/core/GizmoHelper.js"],"names":["React","useThree","useFrame","createPortal","Object3D","Matrix4","Quaternion","Vector3","Scene","OrthographicCamera","useCamera","Context","createContext","useGizmoContext","useContext","turnRate","Math","PI","dummy","matrix","q1","q2","target","targetPosition","targetQuaternion","GizmoHelper","alignment","margin","onUpdate","onTarget","children","GizmoHelperComponent","size","mainCamera","camera","gl","scene","invalidate","backgroundRef","useRef","gizmoRef","virtualCam","virtualScene","useState","animating","radius","focusPoint","tweenCamera","direction","console","log","current","position","distanceTo","copy","lookAt","quaternion","multiplyScalar","add","animateStep","delta","step","rotateTowards","set","applyQuaternion","updateProjectionMatrix","angleTo","useEffect","background","beforeRender","_gizmoRef$current","invert","setFromRotationMatrix","_","autoClear","clearDepth","render","gizmoHelperContext","raycast","marginX","marginY","x","endsWith","width","y","startsWith","height","createElement","Provider","value","ref","makeDefault"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useThree, useFrame, createPortal } from '@react-three/fiber';\nimport { Object3D, Matrix4, Quaternion, Vector3, Scene } from 'three';\nimport { OrthographicCamera } from './OrthographicCamera.js';\nimport { useCamera } from './useCamera.js';\n\nconst Context = /*#__PURE__*/React.createContext({});\nconst useGizmoContext = () => {\n  return React.useContext(Context);\n};\nconst turnRate = 2 * Math.PI; // turn rate in angles per second\n\nconst dummy = new Object3D();\nconst matrix = new Matrix4();\nconst [q1, q2] = [new Quaternion(), new Quaternion()];\nconst target = new Vector3();\nconst targetPosition = new Vector3();\nconst targetQuaternion = new Quaternion();\nconst GizmoHelper = ({\n  alignment = 'bottom-right',\n  margin = [80, 80],\n  onUpdate,\n  onTarget,\n  children: GizmoHelperComponent\n}) => {\n  const size = useThree(({\n    size\n  }) => size);\n  const mainCamera = useThree(({\n    camera\n  }) => camera);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const invalidate = useThree(({\n    invalidate\n  }) => invalidate);\n  const backgroundRef = React.useRef();\n  const gizmoRef = React.useRef();\n  const virtualCam = React.useRef(null);\n  const [virtualScene] = React.useState(() => new Scene());\n  const animating = React.useRef(false);\n  const radius = React.useRef(0);\n  const focusPoint = React.useRef(new Vector3(0, 0, 0));\n\n  const tweenCamera = direction => {\n    console.log('...');\n    animating.current = true;\n    focusPoint.current = onTarget();\n    radius.current = mainCamera.position.distanceTo(target); // Rotate from current camera orientation\n\n    dummy.position.copy(target);\n    dummy.lookAt(mainCamera.position);\n    q1.copy(dummy.quaternion); // To new current camera orientation\n\n    targetPosition.copy(direction).multiplyScalar(radius.current).add(target);\n    dummy.lookAt(targetPosition);\n    q2.copy(dummy.quaternion);\n    invalidate();\n  };\n\n  const animateStep = delta => {\n    invalidate();\n    if (!animating.current) return;\n    const step = delta * turnRate; // animate position by doing a slerp and then scaling the position on the unit sphere\n\n    q1.rotateTowards(q2, step);\n    mainCamera.position.set(0, 0, 1).applyQuaternion(q1).multiplyScalar(radius.current).add(focusPoint.current); // animate orientation\n\n    mainCamera.quaternion.rotateTowards(targetQuaternion, step);\n    mainCamera.updateProjectionMatrix();\n    onUpdate && onUpdate();\n\n    if (q1.angleTo(q2) < 0.01) {\n      animating.current = false;\n    }\n  };\n\n  React.useEffect(() => {\n    if (scene.background) {\n      //Interchange the actual scene background with the virtual scene\n      backgroundRef.current = scene.background;\n      scene.background = null;\n      virtualScene.background = backgroundRef.current;\n    }\n\n    return () => {\n      // reset on unmount\n      if (backgroundRef.current) {\n        scene.background = backgroundRef.current;\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const beforeRender = () => {\n    var _gizmoRef$current;\n\n    // Sync gizmo with main camera orientation\n    matrix.copy(mainCamera.matrix).invert();\n    (_gizmoRef$current = gizmoRef.current) == null ? void 0 : _gizmoRef$current.quaternion.setFromRotationMatrix(matrix);\n  };\n\n  useFrame((_, delta) => {\n    if (virtualCam.current && gizmoRef.current) {\n      animateStep(delta);\n      beforeRender();\n      gl.autoClear = false;\n      gl.clearDepth();\n      gl.render(virtualScene, virtualCam.current);\n    }\n  });\n  const gizmoHelperContext = {\n    tweenCamera,\n    raycast: useCamera(virtualCam)\n  }; // Position gizmo component within scene\n\n  const [marginX, marginY] = margin;\n  const x = alignment.endsWith('-left') ? -size.width / 2 + marginX : size.width / 2 - marginX;\n  const y = alignment.startsWith('top-') ? size.height / 2 - marginY : -size.height / 2 + marginY;\n  return createPortal( /*#__PURE__*/React.createElement(Context.Provider, {\n    value: gizmoHelperContext\n  }, /*#__PURE__*/React.createElement(OrthographicCamera, {\n    ref: virtualCam,\n    makeDefault: false,\n    position: [0, 0, 200]\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    ref: gizmoRef,\n    position: [x, y, 0]\n  }, GizmoHelperComponent)), virtualScene);\n};\n\nexport { GizmoHelper, useGizmoContext };\n"]},"metadata":{},"sourceType":"module"}