{"ast":null,"code":"const e = Symbol(),\n      t = Symbol(),\n      r = Symbol(),\n      n = Object.getPrototypeOf,\n      o = new WeakMap(),\n      s = e => e && (o.has(e) ? o.get(e) : n(e) === Object.prototype || n(e) === Array.prototype),\n      c = e => \"object\" == typeof e && null !== e,\n      l = (n, o) => {\n  let s = !1;\n\n  const c = (e, t) => {\n    if (!s) {\n      let r = e.a.get(n);\n      r || (r = new Set(), e.a.set(n, r)), r.add(t);\n    }\n  },\n        l = {\n    f: o,\n\n    get(e, t) {\n      return t === r ? n : (c(this, t), i(e[t], this.a, this.c));\n    },\n\n    has(e, r) {\n      return r === t ? (s = !0, this.a.delete(n), !0) : (c(this, r), r in e);\n    },\n\n    ownKeys(t) {\n      return c(this, e), Reflect.ownKeys(t);\n    }\n\n  };\n\n  return o && (l.set = l.deleteProperty = () => !1), l;\n},\n      i = (e, t, o) => {\n  if (!s(e)) return e;\n\n  const c = e[r] || e,\n        i = (e => Object.isFrozen(e) || Object.values(Object.getOwnPropertyDescriptors(e)).some(e => !e.writable))(c);\n\n  let u = o && o.get(c);\n  return u && u.f === i || (u = l(c, i), u.p = new Proxy(i ? (e => {\n    if (Array.isArray(e)) return Array.from(e);\n    const t = Object.getOwnPropertyDescriptors(e);\n    return Object.values(t).forEach(e => {\n      e.configurable = !0;\n    }), Object.create(n(e), t);\n  })(c) : c, u), o && o.set(c, u)), u.a = t, u.c = o, u.p;\n},\n      u = (e, t) => {\n  const r = Reflect.ownKeys(e),\n        n = Reflect.ownKeys(t);\n  return r.length !== n.length || r.some((e, t) => e !== n[t]);\n},\n      a = (t, r, n, o) => {\n  if (Object.is(t, r)) return !1;\n  if (!c(t) || !c(r)) return !0;\n  const s = n.get(t);\n  if (!s) return !0;\n\n  if (o) {\n    const e = o.get(t);\n    if (e && e.n === r) return e.g;\n    o.set(t, {\n      n: r,\n      g: !1\n    });\n  }\n\n  let l = null;\n\n  for (const c of s) {\n    const s = c === e ? u(t, r) : a(t[c], r[c], n, o);\n    if (!0 !== s && !1 !== s || (l = s), l) break;\n  }\n\n  return null === l && (l = !0), o && o.set(t, {\n    n: r,\n    g: l\n  }), l;\n},\n      f = e => !!s(e) && t in e,\n      y = e => s(e) && e[r] || null,\n      b = (e, t = !0) => {\n  o.set(e, t);\n},\n      g = (e, t) => {\n  const r = [],\n        n = (e, o) => {\n    const s = t.get(e);\n    s ? s.forEach(t => {\n      n(e[t], o ? [...o, t] : [t]);\n    }) : o && r.push(o);\n  };\n\n  return n(e), r;\n};\n\nexport { g as affectedToPathList, i as createProxy, y as getUntracked, a as isChanged, b as markToTrack, f as trackMemo };","map":{"version":3,"sources":["../src/index.ts"],"names":["OWN_KEYS_SYMBOL","Symbol","TRACK_MEMO_SYMBOL","GET_ORIGINAL_SYMBOL","getProto","Object","getPrototypeOf","objectsToTrack","WeakMap","isObjectToTrack","obj","has","get","prototype","Array","isObject","x","isFrozen","values","getOwnPropertyDescriptors","some","descriptor","writable","isArray","from","descriptors","forEach","desc","configurable","create","createProxyHandler","origObj","frozen","trackObject","recordUsage","h","key","used","Set","set","add","delete","handler","f","target","this","createProxy","ownKeys","Reflect","deleteProperty","affected","proxyCache","proxyHandler","Proxy","isOwnKeysChanged","nextObj","origKeys","nextKeys","length","k","i","isChanged","cache","is","hit","n","g","changed","c","trackMemo","getUntracked","markToTrack","mark","affectedToPathList","list","walk","path","push"],"mappings":"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","sourcesContent":["// symbols\nconst OWN_KEYS_SYMBOL = Symbol();\nconst TRACK_MEMO_SYMBOL = Symbol();\nconst GET_ORIGINAL_SYMBOL = Symbol();\n\n// properties\nconst AFFECTED_PROPERTY = 'a';\nconst FROZEN_PROPERTY = 'f';\nconst PROXY_PROPERTY = 'p';\nconst PROXY_CACHE_PROPERTY = 'c';\nconst NEXT_OBJECT_PROPERTY = 'n';\nconst CHANGED_PROPERTY = 'g';\n\n// get object prototype\nconst getProto = Object.getPrototypeOf;\n\nconst objectsToTrack = new WeakMap<object, boolean>();\n\n// check if obj is a plain object or an array\nconst isObjectToTrack = <T>(obj: T): obj is T extends object ? T : never => (\n  obj && (objectsToTrack.has(obj as unknown as object)\n    ? objectsToTrack.get(obj as unknown as object) as boolean\n    : (getProto(obj) === Object.prototype || getProto(obj) === Array.prototype)\n  )\n);\n\n// check if it is object\nconst isObject = (x: unknown): x is object => (\n  typeof x === 'object' && x !== null\n);\n\n// check if frozen\nconst isFrozen = (obj: object) => (\n  Object.isFrozen(obj) || (\n    // Object.isFrozen() doesn't detect non-writable properties\n    // See: https://github.com/dai-shi/proxy-compare/pull/8\n    Object.values(Object.getOwnPropertyDescriptors(obj)).some(\n      (descriptor) => !descriptor.writable,\n    )\n  )\n);\n\n// copy frozen object\nconst unfreeze = (obj: object) => {\n  if (Array.isArray(obj)) {\n    // Arrays need a special way to copy\n    return Array.from(obj);\n  }\n  // For non-array objects, we create a new object keeping the prototype\n  // with changing all configurable options (otherwise, proxies will complain)\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  Object.values(descriptors).forEach((desc) => { desc.configurable = true; });\n  return Object.create(getProto(obj), descriptors);\n};\n\ntype Affected = WeakMap<object, Set<string | symbol>>;\ntype ProxyCache<T extends object> = WeakMap<object, ProxyHandler<T>>;\ntype ProxyHandler<T extends object> = {\n  [FROZEN_PROPERTY]: boolean;\n  [PROXY_PROPERTY]?: T;\n  [PROXY_CACHE_PROPERTY]?: ProxyCache<object>;\n  [AFFECTED_PROPERTY]?: Affected;\n  get(target: T, key: string | symbol): unknown;\n  has(target: T, key: string | symbol): boolean;\n  ownKeys(target: T): (string | symbol)[];\n  set?(target: T, key: string | symbol, value: unknown): boolean;\n  deleteProperty?(target: T, key: string | symbol): boolean;\n};\n\nconst createProxyHandler = <T extends object>(origObj: T, frozen: boolean) => {\n  let trackObject = false; // for trackMemo\n  const recordUsage = (h: ProxyHandler<T>, key: string | symbol) => {\n    if (!trackObject) {\n      let used = (h[AFFECTED_PROPERTY] as Affected).get(origObj);\n      if (!used) {\n        used = new Set();\n        (h[AFFECTED_PROPERTY] as Affected).set(origObj, used);\n      }\n      used.add(key);\n    }\n  };\n  const recordObjectAsUsed = (h: ProxyHandler<T>) => {\n    trackObject = true;\n    (h[AFFECTED_PROPERTY] as Affected).delete(origObj);\n  };\n  const handler: ProxyHandler<T> = {\n    [FROZEN_PROPERTY]: frozen,\n    get(target, key) {\n      if (key === GET_ORIGINAL_SYMBOL) {\n        return origObj;\n      }\n      recordUsage(this, key);\n      return createProxy(\n        (target as any)[key],\n        (this[AFFECTED_PROPERTY] as Affected),\n        this[PROXY_CACHE_PROPERTY],\n      );\n    },\n    has(target, key) {\n      if (key === TRACK_MEMO_SYMBOL) {\n        recordObjectAsUsed(this);\n        return true;\n      }\n      // LIMITATION:\n      // We simply record the same as get.\n      // This means { a: {} } and { a: {} } is detected as changed,\n      // if 'a' in obj is handled.\n      recordUsage(this, key);\n      return key in target;\n    },\n    ownKeys(target) {\n      recordUsage(this, OWN_KEYS_SYMBOL);\n      return Reflect.ownKeys(target);\n    },\n  };\n  if (frozen) {\n    handler.set = handler.deleteProperty = () => false;\n  }\n  return handler;\n};\n\n/**\n * Create a proxy.\n *\n * This function will create a proxy at top level and proxy nested objects as you access them,\n * in order to keep track of which properties were accessed via get/has proxy handlers:\n *\n * NOTE: Printing of WeakMap is hard to inspect and not very readable\n * for this purpose you can use the `affectedToPathList` helper.\n *\n * @param {object} obj - Object that will be wrapped on the proxy.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that will hold the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [proxyCache] -\n * WeakMap that will help keep referential identity for proxies.\n * @returns {Proxy<object>} - Object wrapped in a proxy.\n *\n * @example\n * import { createProxy } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n * const proxy = createProxy(original, affected);\n *\n * proxy.a // Will mark as used and track its value.\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"a\"\n *\n * proxy.d // Will mark \"d\" as accessed to track and proxy itself ({ e: \"3\" }).\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"d\"\n */\nexport const createProxy = <T>(\n  obj: T,\n  affected: WeakMap<object, unknown>,\n  proxyCache?: WeakMap<object, unknown>,\n): T => {\n  if (!isObjectToTrack(obj)) return obj;\n  const origObj = (\n    obj as { [GET_ORIGINAL_SYMBOL]?: typeof obj }\n  )[GET_ORIGINAL_SYMBOL]; // unwrap proxy\n  const target = origObj || obj;\n  const frozen = isFrozen(target);\n  let proxyHandler: ProxyHandler<typeof target> | undefined = (\n    proxyCache && (proxyCache as ProxyCache<typeof target>).get(target)\n  );\n  if (!proxyHandler || proxyHandler[FROZEN_PROPERTY] !== frozen) {\n    proxyHandler = createProxyHandler<T extends object ? T : never>(target, frozen);\n    proxyHandler[PROXY_PROPERTY] = new Proxy(\n      frozen ? unfreeze(target) : target,\n      proxyHandler,\n    ) as typeof target;\n    if (proxyCache) {\n      proxyCache.set(target, proxyHandler);\n    }\n  }\n  proxyHandler[AFFECTED_PROPERTY] = affected as Affected;\n  proxyHandler[PROXY_CACHE_PROPERTY] = proxyCache as ProxyCache<object> | undefined;\n  return proxyHandler[PROXY_PROPERTY] as typeof target;\n};\n\nconst isOwnKeysChanged = (origObj: object, nextObj: object) => {\n  const origKeys = Reflect.ownKeys(origObj);\n  const nextKeys = Reflect.ownKeys(nextObj);\n  return origKeys.length !== nextKeys.length\n    || origKeys.some((k, i) => k !== nextKeys[i]);\n};\n\ntype ChangedCache = WeakMap<object, {\n  [NEXT_OBJECT_PROPERTY]: object;\n  [CHANGED_PROPERTY]: boolean;\n}>;\n\n/**\n * Compare changes on objects.\n *\n * This will compare the affected properties on tracked objects inside the proxy\n * to check if there were any changes made to it,\n * by default if no property was accessed on the proxy it will attempt to do a\n * reference equality check for the objects provided (Object.is(a, b)). If you access a property\n * on the proxy, then isChanged will only compare the affected properties.\n *\n * @param {object} origObj - The original object to compare.\n * @param {object} nextObj - Object to compare with the original one.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that holds the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [cache] -\n * WeakMap that holds a cache of the comparisons for better performance with repetitive comparisons,\n * and to avoid infinite loop with circular structures.\n * @returns {boolean} - Boolean indicating if the affected property on the object has changed.\n *\n * @example\n * import { createProxy, isChanged } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n *\n * proxy.a\n *\n * isChanged(original, { a: \"1\" }, affected) // false\n *\n * proxy.a = \"2\"\n *\n * isChanged(original, { a: \"1\" }, affected) // true\n */\n\nexport const isChanged = (\n  origObj: unknown,\n  nextObj: unknown,\n  affected: WeakMap<object, unknown>,\n  cache?: WeakMap<object, unknown>,\n): boolean => {\n  if (Object.is(origObj, nextObj)) {\n    return false;\n  }\n  if (!isObject(origObj) || !isObject(nextObj)) return true;\n  const used = (affected as Affected).get(origObj);\n  if (!used) return true;\n  if (cache) {\n    const hit = (cache as ChangedCache).get(origObj);\n    if (hit && hit[NEXT_OBJECT_PROPERTY] === nextObj) {\n      return hit[CHANGED_PROPERTY];\n    }\n    // for object with cycles\n    (cache as ChangedCache).set(origObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: false,\n    });\n  }\n  let changed: boolean | null = null;\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key of used) {\n    const c = key === OWN_KEYS_SYMBOL ? isOwnKeysChanged(origObj, nextObj)\n      : isChanged(\n        (origObj as any)[key],\n        (nextObj as any)[key],\n        affected,\n        cache,\n      );\n    if (c === true || c === false) changed = c;\n    if (changed) break;\n  }\n  if (changed === null) changed = true;\n  if (cache) {\n    cache.set(origObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: changed,\n    });\n  }\n  return changed;\n};\n\n// explicitly track object with memo\nexport const trackMemo = (obj: unknown) => {\n  if (isObjectToTrack(obj)) {\n    return TRACK_MEMO_SYMBOL in obj;\n  }\n  return false;\n};\n\n/**\n * Unwrap proxy to get the original object.\n *\n * Used to retrieve the original object used to create the proxy instance with `createProxy`.\n *\n * @param {Proxy<object>} obj -  The proxy wrapper of the originial object.\n * @returns {object | null} - Return either the unwrapped object if exists.\n *\n * @example\n * import { createProxy, getUntracked } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n * const originalFromProxy = getUntracked(proxy)\n *\n * Obejct.is(original, originalFromProxy) // true\n * isChanged(original, originalFromProxy, affected) // false\n */\nexport const getUntracked = <T>(obj: T): T | null => {\n  if (isObjectToTrack(obj)) {\n    return (obj as { [GET_ORIGINAL_SYMBOL]?: T })[GET_ORIGINAL_SYMBOL] || null;\n  }\n  return null;\n};\n\n/**\n * Mark object to be tracked.\n *\n * This function marks an object that will be passed into `createProxy`\n * as marked to track or not. By default only Array and Object are marked to track,\n * so this is useful for example to mark a class instance to track or to mark a object\n * to be untracked when creating your proxy.\n *\n * @param {object} obj - Object to mark as tracked or not.\n * @param {mark} boolean - Boolean indicating whether you want to track this object or not.\n * @returns {undefined} - No return.\n *\n * @example\n * import { createProxy, markToTrack, isChanged } from 'proxy-compare';\n *\n * const nested = { e: \"3\" }\n *\n * markToTrack(nested, false)\n *\n * const original = { a: \"1\", c: \"2\", d: nested };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n *\n * proxy.d.e\n *\n * isChanged(original, { d: { e: \"3\" } }, affected) // true\n */\nexport const markToTrack = (obj: object, mark = true) => {\n  objectsToTrack.set(obj, mark);\n};\n\n// convert affected to path list\nexport const affectedToPathList = (\n  obj: unknown,\n  affected: WeakMap<object, unknown>,\n) => {\n  const list: (string | symbol)[][] = [];\n  const walk = (x: unknown, path?: (string | symbol)[]) => {\n    const used = (affected as Affected).get(x as object);\n    if (used) {\n      used.forEach((key) => {\n        walk((x as any)[key], path ? [...path, key] : [key]);\n      });\n    } else if (path) {\n      list.push(path);\n    }\n  };\n  walk(obj);\n  return list;\n};\n"]},"metadata":{},"sourceType":"module"}